{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 4, "column": 0}, "map": {"version":3,"sources":["file:///Users/harshitgangwar/Desktop/SkillForge/app/%28main%29/roadmaps/data/frontend.jsx"],"sourcesContent":["const frontendRoadmap = {\n  \"HTML & CSS\": {\n    title: \"Spider-Man ðŸ•¸ â€“ HTML & CSS\",\n    objective:\n      \"Learn the foundations of web design by mastering HTML and CSS, creating the structure and styling that powers the web.\",\n    sections: [\n      {\n        title: \"1. HTML Basics â€“ The Webâ€™s Skeleton\",\n        points: [\n          \"Introduction to HTML (HyperText Markup Language) and its role in web development\",\n          \"Understanding HTML tags and elements\",\n          \"Building a simple webpage using HTML: html, head, body, header, footer\",\n          \"Working with text elements: h1, p, a, ul, ol, li\",\n          \"Structuring content with semantic HTML: section, article, nav, main, aside\",\n          \"Key Concepts: Elements, Tags, Nesting, Attributes, Semantic HTML\",\n        ],\n      },\n      {\n        title: \"2. HTML Forms and Inputs â€“ User Interaction\",\n        points: [\n          \"Creating forms with form, input, textarea, select, button\",\n          \"Understanding form submission, GET and POST methods\",\n          \"Using input types (text, email, number, password)\",\n          \"Validating form data with attributes like required, min, max\",\n          \"Key Concepts: Form elements, Input validation, Method types, Accessibility in forms\",\n        ],\n      },\n      {\n        title: \"3. CSS Basics â€“ Styling the Web\",\n        points: [\n          \"Introduction to CSS (Cascading Style Sheets) and its purpose\",\n          \"Understanding the CSS box model: margin, border, padding, content\",\n          \"Styling text, colors, and fonts with color, font-family, font-size, line-height\",\n          \"Understanding the concept of specificity and how CSS selectors work\",\n          \"Applying styles to HTML elements using selectors, classes, and IDs\",\n          \"Key Concepts: Box model, Selectors, Specificity, Inline vs external CSS\",\n        ],\n      },\n      {\n        title: \"4. CSS Layouts â€“ Building Responsive Pages\",\n        points: [\n          \"Introduction to layout techniques in CSS: display, position, float, flexbox, grid\",\n          \"Building layouts with Flexbox: Aligning items, creating rows and columns\",\n          \"Introduction to CSS Grid: Creating complex grid-based layouts\",\n          \"Media queries: Making websites responsive to different screen sizes\",\n          \"Key Concepts: Flexbox, Grid layout, Responsive design, Mobile-first approach\",\n        ],\n      },\n      {\n        title: \"5. Advanced CSS Styling\",\n        points: [\n          \"Using pseudo-classes and pseudo-elements: :hover, :focus, :nth-child\",\n          \"Animations and transitions: Making elements move or change on user interaction\",\n          \"Styling links, buttons, and forms for better UX\",\n          \"Key Concepts: Pseudo-classes, Pseudo-elements, Animations, Transitions\",\n        ],\n      },\n      {\n        title: \"6. CSS Frameworks â€“ Speeding Up Development\",\n        points: [\n          \"Introduction to popular CSS frameworks: Bootstrap, TailwindCSS\",\n          \"How to use a CSS framework to quickly style pages\",\n          \"Customizing and overriding default styles in a framework\",\n          \"Key Concepts: Grid systems, Utility-first design, Responsive frameworks\",\n        ],\n      },\n      {\n        title: \"7. HTML5 & CSS3 Features\",\n        points: [\n          \"HTML5 semantic elements: header, footer, main, article, section\",\n          \"New input types in HTML5: date, email, tel, range, color\",\n          \"CSS3 properties: border-radius, box-shadow, gradient, transitions\",\n          \"Key Concepts: Modern HTML5 elements, Advanced CSS3 techniques, Cross-browser compatibility\",\n        ],\n      },\n    ],\n  },\n\n  JavaScript: {\n    title: \"JavaScript Surgeons ðŸ©º\",\n    objective:\n      \"Master the fundamentals and advanced concepts of JavaScript, as well as the DOM, in scripting dynamic web pages.\",\n    sections: [\n      {\n        title: \"1. JavaScript Basics â€“ The Language of the Web\",\n        points: [\n          \"Introduction to JavaScript and its role in web development\",\n          \"Understanding variables and data types: string, number, boolean, object, array, null, undefined\",\n          \"Declaring variables with var, let, const\",\n          \"Understanding scope (Global, Local, Block Scope) and hoisting\",\n          \"Basic operators: +, -, *, /, %, ==, ===, !==\",\n          \"Control flow statements: if, else, else if, switch, ternary operator\",\n          \"Key Concepts: Variables, Data Types, Operators, Conditionals\",\n        ],\n      },\n      {\n        title: \"2. JavaScript Functions â€“ Reusable Code\",\n        points: [\n          \"What are JavaScript functions? Why are they important?\",\n          \"Declaring functions with the function keyword\",\n          \"Understanding parameters, arguments, and return values\",\n          \"Arrow functions: A modern way to define functions\",\n          \"Function scope and closures\",\n          \"Key Concepts: Function Declaration, Function Expression, Parameters vs Arguments, Return Value, Scope, Closures\",\n        ],\n      },\n      {\n        title: \"3. JavaScript Loops â€“ Automating Repetitive Tasks\",\n        points: [\n          \"Introduction to loops: for, while, and do...while loops\",\n          \"Looping through arrays\",\n          \"Loop control statements: break and continue\",\n          \"Using for...in and for...of loops\",\n          \"Key Concepts: Iteration, Loop control, Array iteration\",\n        ],\n      },\n      {\n        title: \"4. JavaScript Arrays â€“ Working with Collections of Data\",\n        points: [\n          \"What is an array?\",\n          \"Creating arrays, accessing elements by index\",\n          \"Array methods: push, pop, shift, unshift, splice, slice, indexOf, etc.\",\n          \"Using loops to iterate through arrays\",\n          \"Multi-dimensional arrays\",\n          \"Key Concepts: Array indices, Array methods, Array iteration\",\n        ],\n      },\n      {\n        title: \"5. JavaScript Objects â€“ Working with Key-Value Pairs\",\n        points: [\n          \"What is an object?\",\n          \"Creating objects with literal notation and constructor functions\",\n          \"Accessing object properties\",\n          \"Adding, updating, and deleting object properties\",\n          \"Object methods\",\n          \"Key Concepts: Object properties, Object methods, Object iteration\",\n        ],\n      },\n      {\n        title: \"6. DOM Manipulation â€“ Interacting with the Webpage\",\n        points: [\n          \"Introduction to the DOM (Document Object Model)\",\n          \"Selecting elements in the DOM: getElementById, getElementsByClassName, querySelector, querySelectorAll\",\n          \"Modifying element content: innerHTML, textContent\",\n          \"Modifying element attributes\",\n          \"Creating and appending new elements to the DOM\",\n          \"Key Concepts: DOM tree, Element selection, Content manipulation, Dynamic HTML\",\n        ],\n      },\n      {\n        title: \"7. JavaScript Events â€“ Responding to User Actions\",\n        points: [\n          \"Introduction to events: click, mouseover, keypress, submit, etc.\",\n          \"Adding event listeners to elements\",\n          \"Event handlers and callback functions\",\n          \"Event bubbling and capturing\",\n          \"Preventing default event behavior\",\n          \"Key Concepts: Event listeners, Event handlers, Event propagation\",\n        ],\n      },\n      {\n        title: \"8. Asynchronous JavaScript â€“ Handling Delays\",\n        points: [\n          \"Introduction to asynchronous programming and why it's important\",\n          \"Callbacks and callback hell\",\n          \"Promises: a better way to handle asynchronous operations\",\n          \"Async/Await syntax: A cleaner way to handle promises\",\n          \"Making API requests with fetch\",\n          \"Key Concepts: Asynchronous operations, Callbacks, Promises, Async/Await\",\n        ],\n      },\n      {\n        title: \"9. ES6+ Features â€“ Modern JavaScript\",\n        points: [\n          \"Introduction to ECMAScript 6 (ES6) and beyond\",\n          \"Let and const: improved variable declarations\",\n          \"Arrow functions: concise function syntax\",\n          \"Template literals: string interpolation\",\n          \"Destructuring: extracting values from arrays and objects\",\n          \"Spread and Rest operators\",\n          \"Classes: a more object-oriented approach\",\n          \"Modules: organizing code\",\n          \"Key Concepts: Modern JS syntax, improved code organization, new language features\",\n        ],\n      },\n      {\n        title: \"10. Working with APIs â€“ Fetching Data from Servers\",\n        points: [\n          \"What are APIs?\",\n          \"Introduction to RESTful APIs\",\n          \"Making API requests with fetch\",\n          \"Handling API responses\",\n          \"Working with JSON data\",\n          \"Key Concepts: API endpoints, HTTP methods, JSON parsing, Asynchronous data fetching\",\n        ],\n      },\n      {\n        title: \"11. Error Handling â€“ Debugging JavaScript\",\n        points: [\n          \"What are JavaScript errors?\",\n          \"Try...catch statements: handling errors gracefully\",\n          \"Throwing custom errors\",\n          \"Debugging tools and techniques: console.log, browser debugger\",\n          \"Key Concepts: Error types, try...catch, Debugging\",\n        ],\n      },\n      {\n        title: \"12. JavaScript Testing â€“ Ensuring Code Quality\",\n        points: [\n          \"Introduction to JavaScript testing\",\n          \"Unit testing basics\",\n          \"Testing frameworks: Jest, Mocha\",\n          \"Writing tests for functions and modules\",\n          \"Key Concepts: Unit tests, Test frameworks, Code Quality\",\n        ],\n      },\n      {\n        title: \"13. JavaScript Best Practices and Patterns\",\n        points: [\n          \"Code organization and structure\",\n          \"Writing clean and maintainable code\",\n          \"Design patterns: common solutions to recurring problems\",\n          \"Avoiding common mistakes\",\n          \"Key Concepts: Code maintainability, Design patterns, Code quality\",\n        ],\n      },\n    ],\n  },\n\n  React: {\n    title: \"React Alchemist ðŸ§ª\",\n    objective:\n      \"Master the art of building dynamic, interactive, and scalable web applications using React.js, Next.js, Tailwind CSS, ShadCN, and other modern technologies. Learn best practices, performance optimizations, and advanced patterns for building professional-grade React applications.\",\n      pdf: \"/pdfs/react.pdf\",\n    sections: [\n      {\n        title: \"1. Introduction to React â€“ The Modern JavaScript Library\",\n        points: [\n          \"What is React and why itâ€™s the go-to library for building UIs\",\n          \"Understanding the virtual DOM and how React improves performance\",\n          \"Setting up a React project using create-react-app or Vite\",\n          \"JSX: A syntax extension for JavaScript that allows writing HTML in JS\",\n          \"Rendering elements and basic React components\",\n          \"Key Concepts: React, JSX, Virtual DOM, Components\",\n        ],\n      },\n      {\n        title: \"2. Components and Props â€“ The Building Blocks of React\",\n        points: [\n          \"Understanding functional and class components\",\n          \"Passing data between components using props\",\n          \"How to use children and default props\",\n          \"Breaking down UI into smaller reusable components\",\n          \"Key Concepts: Components, Props, Reusability, State vs Props\",\n        ],\n      },\n      {\n        title: \"3. State Management â€“ React's Core Mechanism\",\n        points: [\n          \"Understanding state in React and how it drives component re-renders\",\n          \"Managing state within functional components using useState\",\n          \"Lifting state up to parent components for sharing data\",\n          \"Conditional rendering based on component state\",\n          \"Key Concepts: State, useState, Re-rendering, Lifting state up\",\n        ],\n      },\n      {\n        title: \"4. React Lifecycle Methods â€“ Understanding Component Lifecycles\",\n        points: [\n          \"Introduction to component lifecycle in class components\",\n          \"Exploring React's lifecycle methods (componentDidMount, componentWillUnmount)\",\n          \"Using useEffect hook for side effects in functional components\",\n          \"How Reactâ€™s lifecycle methods help manage data fetching, cleanup, and DOM manipulation\",\n          \"Key Concepts: Lifecycle methods, useEffect, Mounting, Unmounting, Side effects\",\n        ],\n      },\n      {\n        title: \"5. Event Handling â€“ Interactivity in React\",\n        points: [\n          \"Handling events like clicks, form submissions, and user input\",\n          \"Binding event handlers in React components\",\n          \"Using event.preventDefault() and event.stopPropagation() for event flow control\",\n          \"Creating controlled and uncontrolled form components\",\n          \"Key Concepts: Event handling, Forms, event.preventDefault(), event.stopPropagation()\",\n        ],\n      },\n      {\n        title: \"6. React Hooks â€“ Bringing Functionality to Components\",\n        points: [\n          \"Introduction to React Hooks and their importance in functional components\",\n          \"Using useState for state management and useEffect for side effects\",\n          \"Exploring other hooks: useContext, useReducer, useCallback, useMemo\",\n          \"Best practices for working with hooks\",\n          \"Key Concepts: Hooks, useState, useEffect, useContext, useReducer, useCallback, useMemo\",\n        ],\n      },\n      {\n        title: \"7. React Router â€“ Navigating Between Pages\",\n        points: [\n          \"Introduction to React Router for client-side routing\",\n          \"Setting up React Router for multiple views (pages) in a single-page application (SPA)\",\n          \"Using Link and Route to navigate between components\",\n          \"Dynamic routing with URL parameters and query strings\",\n          \"Key Concepts: React Router, Link, Route, Dynamic routing, SPA\",\n        ],\n      },\n      {\n        title: \"8. State Management with Context API â€“ Global State for Your App\",\n        points: [\n          \"What is the Context API and when to use it for global state management\",\n          \"Creating a context, providing it, and consuming it in components\",\n          \"Using useContext to access and update global state\",\n          \"Avoiding prop drilling with the Context API\",\n          \"Key Concepts: Context API, Global state, useContext, Prop drilling\",\n        ],\n      },\n      {\n        title: \"9. Forms in React â€“ Building Dynamic Forms\",\n        points: [\n          \"Controlled vs uncontrolled forms in React\",\n          \"Handling form submissions and form validation\",\n          \"Building complex forms with multiple input fields\",\n          \"Using third-party libraries like Formik or React Hook Form for easier form management\",\n          \"Key Concepts: Forms, Controlled inputs, Validation, Formik, React Hook Form\",\n        ],\n      },\n      {\n        title: \"10. Styling in React â€“ From CSS to Styled Components\",\n        points: [\n          \"Styling React components using traditional CSS, CSS Modules, and styled-components\",\n          \"Introduction to CSS-in-JS libraries like Emotion and styled-components\",\n          \"Managing responsive designs in React apps\",\n          \"Best practices for CSS architecture in React (BEM, CSS Modules)\",\n          \"Key Concepts: CSS, CSS-in-JS, styled-components, Responsive design\",\n        ],\n      },\n      {\n        title: \"11. Performance Optimization â€“ Making Your App Fast\",\n        points: [\n          \"Understanding Reactâ€™s rendering behavior and performance bottlenecks\",\n          \"Techniques to optimize performance in React apps (memoization, lazy loading)\",\n          \"Using React.memo, useMemo, and useCallback hooks\",\n          \"Code splitting and lazy loading with React Suspense\",\n          \"Key Concepts: Performance, Memoization, React.memo, useMemo, useCallback, Code splitting\",\n        ],\n      },\n      {\n        title: \"12. Deploying Your React Application â€“ Going Live\",\n        points: [\n          \"Deployment options for React apps: Netlify, Vercel, Heroku, AWS, etc.\",\n          \"Configuring environment variables for different deployment environments\",\n          \"Building the React app for production using npm run build\",\n          \"Setting up continuous deployment for automatic updates\",\n          \"Key Concepts: Deployment, Continuous integration, Production build, Environment variables\",\n        ],\n      },\n      {\n        title: \"13. React Advanced Patterns â€“ Enhancing Your Skills\",\n        points: [\n          \"Introduction to higher-order components (HOCs) and render props\",\n          \"Understanding compound components for reusable logic\",\n          \"Custom hooks: Creating your own hooks for code reuse\",\n          \"Using context providers and consumers for state management\",\n          \"Key Concepts: Higher-order components, Render props, Custom hooks, Compound components\",\n        ],\n      },\n      {\n        title: \"14. Building Scalable React Applications â€“ Architecture and Design\",\n        points: [\n          \"Structuring large-scale React applications using component-based design\",\n          \"Organizing components, hooks, and utilities for maintainability\",\n          \"Breaking the application into features for better scalability\",\n          \"Using state management tools like Redux or Zustand for advanced state management\",\n          \"Key Concepts: Scalability, Component-based design, Architecture, Redux, Zustand\",\n        ],\n      },\n      {\n        title: \"15. NextJS â€“ The React Framework for Full-Stack Applications\",\n        pdf: \"/pdfs/nextjs.pdf\",\n        points: [\n          \"Introduction to Next.js and why itâ€™s an essential tool for React developers\",\n          \"Setting up a Next.js project and understanding its file-based routing\",\n          \"Static Site Generation (SSG) and Server-Side Rendering (SSR) in Next.js\",\n          \"API Routes in Next.js for backend functionality within a React app\",\n          \"Dynamic routing and how Next.js handles URL parameters\",\n          \"Key Concepts: Next.js, File-based Routing, SSR, SSG, API Routes\",\n        ],\n      },\n    ],\n  },\n};\n\nexport default frontendRoadmap;\n"],"names":[],"mappings":";;;;AAAA,MAAM,kBAAkB;IACtB,cAAc;QACZ,OAAO;QACP,WACE;QACF,UAAU;YACR;gBACE,OAAO;gBACP,QAAQ;oBACN;oBACA;oBACA;oBACA;oBACA;oBACA;iBACD;YACH;YACA;gBACE,OAAO;gBACP,QAAQ;oBACN;oBACA;oBACA;oBACA;oBACA;iBACD;YACH;YACA;gBACE,OAAO;gBACP,QAAQ;oBACN;oBACA;oBACA;oBACA;oBACA;oBACA;iBACD;YACH;YACA;gBACE,OAAO;gBACP,QAAQ;oBACN;oBACA;oBACA;oBACA;oBACA;iBACD;YACH;YACA;gBACE,OAAO;gBACP,QAAQ;oBACN;oBACA;oBACA;oBACA;iBACD;YACH;YACA;gBACE,OAAO;gBACP,QAAQ;oBACN;oBACA;oBACA;oBACA;iBACD;YACH;YACA;gBACE,OAAO;gBACP,QAAQ;oBACN;oBACA;oBACA;oBACA;iBACD;YACH;SACD;IACH;IAEA,YAAY;QACV,OAAO;QACP,WACE;QACF,UAAU;YACR;gBACE,OAAO;gBACP,QAAQ;oBACN;oBACA;oBACA;oBACA;oBACA;oBACA;oBACA;iBACD;YACH;YACA;gBACE,OAAO;gBACP,QAAQ;oBACN;oBACA;oBACA;oBACA;oBACA;oBACA;iBACD;YACH;YACA;gBACE,OAAO;gBACP,QAAQ;oBACN;oBACA;oBACA;oBACA;oBACA;iBACD;YACH;YACA;gBACE,OAAO;gBACP,QAAQ;oBACN;oBACA;oBACA;oBACA;oBACA;oBACA;iBACD;YACH;YACA;gBACE,OAAO;gBACP,QAAQ;oBACN;oBACA;oBACA;oBACA;oBACA;oBACA;iBACD;YACH;YACA;gBACE,OAAO;gBACP,QAAQ;oBACN;oBACA;oBACA;oBACA;oBACA;oBACA;iBACD;YACH;YACA;gBACE,OAAO;gBACP,QAAQ;oBACN;oBACA;oBACA;oBACA;oBACA;oBACA;iBACD;YACH;YACA;gBACE,OAAO;gBACP,QAAQ;oBACN;oBACA;oBACA;oBACA;oBACA;oBACA;iBACD;YACH;YACA;gBACE,OAAO;gBACP,QAAQ;oBACN;oBACA;oBACA;oBACA;oBACA;oBACA;oBACA;oBACA;oBACA;iBACD;YACH;YACA;gBACE,OAAO;gBACP,QAAQ;oBACN;oBACA;oBACA;oBACA;oBACA;oBACA;iBACD;YACH;YACA;gBACE,OAAO;gBACP,QAAQ;oBACN;oBACA;oBACA;oBACA;oBACA;iBACD;YACH;YACA;gBACE,OAAO;gBACP,QAAQ;oBACN;oBACA;oBACA;oBACA;oBACA;iBACD;YACH;YACA;gBACE,OAAO;gBACP,QAAQ;oBACN;oBACA;oBACA;oBACA;oBACA;iBACD;YACH;SACD;IACH;IAEA,OAAO;QACL,OAAO;QACP,WACE;QACA,KAAK;QACP,UAAU;YACR;gBACE,OAAO;gBACP,QAAQ;oBACN;oBACA;oBACA;oBACA;oBACA;oBACA;iBACD;YACH;YACA;gBACE,OAAO;gBACP,QAAQ;oBACN;oBACA;oBACA;oBACA;oBACA;iBACD;YACH;YACA;gBACE,OAAO;gBACP,QAAQ;oBACN;oBACA;oBACA;oBACA;oBACA;iBACD;YACH;YACA;gBACE,OAAO;gBACP,QAAQ;oBACN;oBACA;oBACA;oBACA;oBACA;iBACD;YACH;YACA;gBACE,OAAO;gBACP,QAAQ;oBACN;oBACA;oBACA;oBACA;oBACA;iBACD;YACH;YACA;gBACE,OAAO;gBACP,QAAQ;oBACN;oBACA;oBACA;oBACA;oBACA;iBACD;YACH;YACA;gBACE,OAAO;gBACP,QAAQ;oBACN;oBACA;oBACA;oBACA;oBACA;iBACD;YACH;YACA;gBACE,OAAO;gBACP,QAAQ;oBACN;oBACA;oBACA;oBACA;oBACA;iBACD;YACH;YACA;gBACE,OAAO;gBACP,QAAQ;oBACN;oBACA;oBACA;oBACA;oBACA;iBACD;YACH;YACA;gBACE,OAAO;gBACP,QAAQ;oBACN;oBACA;oBACA;oBACA;oBACA;iBACD;YACH;YACA;gBACE,OAAO;gBACP,QAAQ;oBACN;oBACA;oBACA;oBACA;oBACA;iBACD;YACH;YACA;gBACE,OAAO;gBACP,QAAQ;oBACN;oBACA;oBACA;oBACA;oBACA;iBACD;YACH;YACA;gBACE,OAAO;gBACP,QAAQ;oBACN;oBACA;oBACA;oBACA;oBACA;iBACD;YACH;YACA;gBACE,OAAO;gBACP,QAAQ;oBACN;oBACA;oBACA;oBACA;oBACA;iBACD;YACH;YACA;gBACE,OAAO;gBACP,KAAK;gBACL,QAAQ;oBACN;oBACA;oBACA;oBACA;oBACA;oBACA;iBACD;YACH;SACD;IACH;AACF;uCAEe","debugId":null}},
    {"offset": {"line": 402, "column": 0}, "map": {"version":3,"sources":["file:///Users/harshitgangwar/Desktop/SkillForge/app/%28main%29/roadmaps/data/backend.jsx"],"sourcesContent":["const backendRoadmap = {\n  \"Node.js Basics\": {\n    title: \"Node Ninja ðŸ¥· â€“ Node.js Backend Fundamentals\",\n    objective: \"Learn the foundations of Node.js, event-driven architecture, and asynchronous programming to build scalable backend applications.\",\n    pdf: \"/pdfs/backend.pdf\",\n    sections: [\n      {\n        title: \"1. Introduction to Node.js â€“ The Power of JavaScript on the Server\",\n        points: [\n          \"What is Node.js and how it differs from traditional server-side languages\",\n          \"Understanding the Node.js runtime environment\",\n          \"The event-driven, non-blocking I/O model in Node.js\",\n          \"Setting up a simple Node.js application\",\n          \"Installing and using Node.js with npm (Node Package Manager)\",\n          \"Key Concepts: Event-driven architecture, Non-blocking I/O, npm, Modules\",\n        ],\n      },\n      {\n        title: \"2. Understanding the Event Loop â€“ Node.js Architecture\",\n        points: [\n          \"What is the event loop and how Node.js handles concurrency\",\n          \"How Node.js uses the event loop to process requests asynchronously\",\n          \"Blocking vs Non-blocking code execution\",\n          \"The importance of callbacks and promises in managing asynchronous code\",\n          \"Key Concepts: Event loop, Asynchronous processing, Callbacks, Promises\",\n        ],\n      },\n      {\n        title: \"3. Creating a Basic HTTP Server\",\n        points: [\n          \"How to create a basic HTTP server with Node.js using the http module\",\n          \"Setting up routes to handle different HTTP requests (GET, POST, PUT, DELETE)\",\n          \"Sending and receiving data with the server\",\n          \"Working with request and response objects\",\n          \"Key Concepts: HTTP server, Request/Response objects, Routing\",\n        ],\n      },\n      {\n        title: \"4. Express.js â€“ Simplifying Backend Development\",\n        points: [\n          \"Introduction to Express.js and how it simplifies Node.js backend development\",\n          \"Setting up an Express app and defining routes\",\n          \"Handling dynamic data with URL parameters and query strings\",\n          \"Middleware in Express: What is middleware and how to use it\",\n          \"Built-in Express middleware functions (e.g., body-parser, cookie-parser)\",\n          \"Key Concepts: Express.js, Routing, Middleware, Request handling\",\n        ],\n      },\n      {\n        title: \"5. RESTful API Design â€“ Building APIs with Express\",\n        points: [\n          \"What is a RESTful API and how to structure it\",\n          \"Designing endpoints and handling HTTP methods (GET, POST, PUT, DELETE)\",\n          \"Using query parameters and request bodies for passing data\",\n          \"Returning JSON data and handling status codes in API responses\",\n          \"Key Concepts: REST API design, CRUD operations, Status codes, JSON responses\",\n        ],\n      },\n    ],\n  },\n\n  \"Databases & ORMs\": {\n    title: \"Database Mastery â€“ Connecting Node.js to Databases\",\n    objective: \"Learn to connect Node.js applications to SQL and NoSQL databases, perform CRUD operations, and use ORMs for efficiency.\",\n    sections: [\n      {\n        title: \"6. Working with Databases â€“ Connecting Node.js to Databases\",\n        points: [\n          \"Introduction to databases (SQL vs NoSQL)\",\n          \"Using MongoDB with Node.js (Setting up MongoDB, connecting via Mongoose)\",\n          \"Working with CRUD operations in MongoDB (Create, Read, Update, Delete)\",\n          \"Introduction to SQL databases (using MySQL/PostgreSQL with Node.js)\",\n          \"Using ORMs like Drizzle, Prisma, or Sequelize\",\n          \"Key Concepts: MongoDB, SQL, NoSQL, CRUD, Mongoose, ORMs\",\n        ],\n      },\n    ],\n  },\n\n  \"Authentication & Security\": {\n    title: \"Secure Ninja â€“ Authentication and Authorization\",\n    objective: \"Implement user authentication, role-based access, and secure your Node.js applications using JWT and bcrypt.\",\n    sections: [\n      {\n        title: \"7. Authentication and Authorization â€“ Securing Your Application\",\n        points: [\n          \"User authentication and authorization concepts\",\n          \"Using JWT (JSON Web Tokens) for stateless authentication\",\n          \"Setting up user login and registration endpoints\",\n          \"Password hashing with bcrypt.js\",\n          \"Role-based access control and securing routes with middleware\",\n          \"Key Concepts: Authentication, Authorization, JWT, bcrypt, Role-based access control\",\n        ],\n      },\n    ],\n  },\n\n  \"File Systems & Real-time Apps\": {\n    title: \"File & Realtime Mastery â€“ Working with Files and WebSockets\",\n    objective: \"Handle file operations and build real-time applications with WebSockets and Socket.io.\",\n    sections: [\n      {\n        title: \"8. Working with File Systems â€“ Reading and Writing Files\",\n        points: [\n          \"Using the fs module for file system operations\",\n          \"Reading and writing files asynchronously and synchronously\",\n          \"Handling file uploads with multer\",\n          \"Key Concepts: File system module, File reading/writing, File uploads\",\n        ],\n      },\n      {\n        title: \"9. Building Real-time Applications â€“ WebSockets with Socket.io\",\n        points: [\n          \"What are WebSockets and how they enable real-time communication\",\n          \"Setting up a WebSocket server using ws or Socket.io\",\n          \"Sending and receiving real-time data between the client and server\",\n          \"Use cases like chat apps, live notifications\",\n          \"Key Concepts: WebSockets, Real-time communication, Socket.io\",\n        ],\n      },\n    ],\n  },\n\n  \"Deployment & Monitoring\": {\n    title: \"Deployment & Monitoring â€“ Going Live and Staying Healthy\",\n    objective: \"Deploy your Node.js apps to production, monitor performance, and protect your APIs with rate limiting.\",\n    sections: [\n      {\n        title: \"10. Deploying Your Node.js Application\",\n        points: [\n          \"Deploying Node.js apps on Heroku, AWS, or DigitalOcean\",\n          \"Setting environment variables for production and development\",\n          \"Configuring reverse proxies with Nginx or Apache\",\n          \"Key Concepts: Deployment, Cloud services, Reverse proxies, Environment variables\",\n        ],\n      },\n      {\n        title: \"11. API Rate Limiting â€“ Protecting Your Endpoints\",\n        points: [\n          \"What is API rate limiting and why it's important\",\n          \"Implementing rate limiting using express-rate-limit\",\n          \"Configuring custom rate limiters for different endpoints\",\n          \"Handling rate limit exceeded errors and responses\",\n          \"Key Concepts: Rate limiting, Throttling, API protection\",\n        ],\n      },\n      {\n        title: \"12. Logging & Monitoring â€“ Tracking Application Health\",\n        points: [\n          \"Using logging libraries like Winston and Morgan\",\n          \"Setting up logging levels (info, warn, error)\",\n          \"Integrating monitoring tools like PM2 for process management\",\n          \"Key Concepts: Logging, Winston, Morgan, PM2, Monitoring\",\n        ],\n      },\n      {\n        title: \"13. GraphQL\",\n        points: [\n          \"Introduction to GraphQL and how it differs from REST\",\n          \"GraphQL architecture: schema, queries, mutations, and subscriptions\",\n          \"Setting up Apollo Server\",\n          \"Writing queries, mutations, and subscriptions\",\n          \"Handling errors and schema design\",\n          \"Key Concepts: GraphQL, Apollo Server, Queries, Mutations, Resolvers\",\n        ],\n      },\n      {\n        title: \"14. Monitoring with PM2\",\n        points: [\n          \"Using PM2 for process management\",\n          \"Auto-restarting apps on crashes\",\n          \"Monitoring performance with PM2 logs and stats\",\n          \"Setting up log rotations\",\n          \"Key Concepts: PM2, Monitoring, Log management\",\n        ],\n      },\n    ],\n  },\n};\n\nexport default backendRoadmap;\n"],"names":[],"mappings":";;;;AAAA,MAAM,iBAAiB;IACrB,kBAAkB;QAChB,OAAO;QACP,WAAW;QACX,KAAK;QACL,UAAU;YACR;gBACE,OAAO;gBACP,QAAQ;oBACN;oBACA;oBACA;oBACA;oBACA;oBACA;iBACD;YACH;YACA;gBACE,OAAO;gBACP,QAAQ;oBACN;oBACA;oBACA;oBACA;oBACA;iBACD;YACH;YACA;gBACE,OAAO;gBACP,QAAQ;oBACN;oBACA;oBACA;oBACA;oBACA;iBACD;YACH;YACA;gBACE,OAAO;gBACP,QAAQ;oBACN;oBACA;oBACA;oBACA;oBACA;oBACA;iBACD;YACH;YACA;gBACE,OAAO;gBACP,QAAQ;oBACN;oBACA;oBACA;oBACA;oBACA;iBACD;YACH;SACD;IACH;IAEA,oBAAoB;QAClB,OAAO;QACP,WAAW;QACX,UAAU;YACR;gBACE,OAAO;gBACP,QAAQ;oBACN;oBACA;oBACA;oBACA;oBACA;oBACA;iBACD;YACH;SACD;IACH;IAEA,6BAA6B;QAC3B,OAAO;QACP,WAAW;QACX,UAAU;YACR;gBACE,OAAO;gBACP,QAAQ;oBACN;oBACA;oBACA;oBACA;oBACA;oBACA;iBACD;YACH;SACD;IACH;IAEA,iCAAiC;QAC/B,OAAO;QACP,WAAW;QACX,UAAU;YACR;gBACE,OAAO;gBACP,QAAQ;oBACN;oBACA;oBACA;oBACA;iBACD;YACH;YACA;gBACE,OAAO;gBACP,QAAQ;oBACN;oBACA;oBACA;oBACA;oBACA;iBACD;YACH;SACD;IACH;IAEA,2BAA2B;QACzB,OAAO;QACP,WAAW;QACX,UAAU;YACR;gBACE,OAAO;gBACP,QAAQ;oBACN;oBACA;oBACA;oBACA;iBACD;YACH;YACA;gBACE,OAAO;gBACP,QAAQ;oBACN;oBACA;oBACA;oBACA;oBACA;iBACD;YACH;YACA;gBACE,OAAO;gBACP,QAAQ;oBACN;oBACA;oBACA;oBACA;iBACD;YACH;YACA;gBACE,OAAO;gBACP,QAAQ;oBACN;oBACA;oBACA;oBACA;oBACA;oBACA;iBACD;YACH;YACA;gBACE,OAAO;gBACP,QAAQ;oBACN;oBACA;oBACA;oBACA;oBACA;iBACD;YACH;SACD;IACH;AACF;uCAEe","debugId":null}},
    {"offset": {"line": 589, "column": 0}, "map": {"version":3,"sources":["file:///Users/harshitgangwar/Desktop/SkillForge/app/%28main%29/roadmaps/data/fullstack.jsx"],"sourcesContent":["const DSA = {\n  \"DSA Roadmap\": {\n    title: \"DSA Mastery ðŸ§ \",\n    objective:\n      \"Master Data Structures and Algorithms from scratch to advanced levels. Build problem-solving skills for interviews, competitive programming, and real-world applications.\",\n    sections: [\n      {\n        title: \"1. Basics of DSA\",\n        points: [\n          \"Introduction to Data Structures & Algorithms\",\n          \"Understanding Time Complexity and Big O notation\",\n          \"Understanding Space Complexity\",\n          \"Problem-solving approach and tips\",\n        ],\n      },\n      {\n        title: \"2. Arrays & Strings\",\n        points: [\n          \"Array operations: traversing, insertion, deletion\",\n          \"Two-pointer technique\",\n          \"Sliding window technique\",\n          \"String manipulation and pattern matching\",\n        ],\n      },\n      {\n        title: \"3. Linked Lists\",\n        points: [\n          \"Singly linked list: operations and implementation\",\n          \"Doubly linked list: operations and implementation\",\n          \"Circular linked list\",\n          \"Common problems: reverse, detect cycle, merge lists\",\n        ],\n      },\n      {\n        title: \"4. Stacks & Queues\",\n        points: [\n          \"Stack implementation and operations\",\n          \"Queue implementation and operations\",\n          \"Deque and Circular Queue\",\n          \"Applications of stacks and queues\",\n        ],\n      },\n      {\n        title: \"5. Hashing & Hash Tables\",\n        points: [\n          \"Hashing concepts and hash functions\",\n          \"Collision handling techniques\",\n          \"Implementing hash tables\",\n          \"Common problems using hashing\",\n        ],\n      },\n      {\n        title: \"6. Recursion & Backtracking\",\n        points: [\n          \"Understanding recursion and recursive functions\",\n          \"Recursion tree and analysis\",\n          \"Backtracking concepts\",\n          \"Classic problems: N-Queens, Sudoku Solver, Maze Problems\",\n        ],\n      },\n      {\n        title: \"7. Searching & Sorting\",\n        points: [\n          \"Linear search and binary search\",\n          \"Binary search on answers / space\",\n          \"Sorting algorithms: Bubble, Selection, Insertion\",\n          \"Efficient sorts: Merge Sort, Quick Sort, Heap Sort\",\n        ],\n      },\n      {\n        title: \"8. Trees\",\n        points: [\n          \"Binary Tree concepts and traversals (inorder, preorder, postorder)\",\n          \"Binary Search Tree (BST) operations\",\n          \"Balanced trees: AVL, Red-Black Tree\",\n          \"Segment Trees and Fenwick Trees\",\n        ],\n      },\n      {\n        title: \"9. Graphs\",\n        points: [\n          \"Graph representation: adjacency matrix & list\",\n          \"Graph traversals: BFS and DFS\",\n          \"Shortest path algorithms: Dijkstra, Bellman-Ford\",\n          \"Minimum spanning tree: Kruskal, Prim\",\n          \"Advanced topics: Topological sort, Cycle detection\",\n        ],\n      },\n      {\n        title: \"10. Heaps & Priority Queues\",\n        points: [\n          \"Min-Heap and Max-Heap implementation\",\n          \"Heap operations: insert, delete, extract min/max\",\n          \"Applications of heaps in algorithms\",\n        ],\n      },\n      {\n        title: \"11. Dynamic Programming\",\n        points: [\n          \"Introduction to DP and overlapping subproblems\",\n          \"Memoization vs Tabulation\",\n          \"Classic DP problems: Fibonacci, Knapsack, Coin Change\",\n          \"Advanced DP problems: LIS, Matrix Chain Multiplication\",\n        ],\n      },\n      {\n        title: \"12. Greedy Algorithms\",\n        points: [\n          \"Greedy choice property and optimal substructure\",\n          \"Classic greedy problems: Activity Selection, Huffman Coding\",\n          \"Difference between greedy and DP\",\n        ],\n      },\n      {\n        title: \"13. Advanced Topics\",\n        points: [\n          \"Tries and their applications\",\n          \"Disjoint Set (Union-Find) and its applications\",\n          \"Graph algorithms: SCC, Bridges, Articulation Points\",\n          \"Bit Manipulation problems\",\n        ],\n      },\n      {\n        title: \"14. Competitive Programming Practice\",\n        points: [\n          \"Participate in contests on Codeforces, LeetCode, HackerRank\",\n          \"Solve problems by difficulty levels: Easy â†’ Medium â†’ Hard\",\n          \"Time management and strategy for contests\",\n        ],\n      },\n    ],\n  },\n};\n\nexport default DSA;\n"],"names":[],"mappings":";;;;AAAA,MAAM,MAAM;IACV,eAAe;QACb,OAAO;QACP,WACE;QACF,UAAU;YACR;gBACE,OAAO;gBACP,QAAQ;oBACN;oBACA;oBACA;oBACA;iBACD;YACH;YACA;gBACE,OAAO;gBACP,QAAQ;oBACN;oBACA;oBACA;oBACA;iBACD;YACH;YACA;gBACE,OAAO;gBACP,QAAQ;oBACN;oBACA;oBACA;oBACA;iBACD;YACH;YACA;gBACE,OAAO;gBACP,QAAQ;oBACN;oBACA;oBACA;oBACA;iBACD;YACH;YACA;gBACE,OAAO;gBACP,QAAQ;oBACN;oBACA;oBACA;oBACA;iBACD;YACH;YACA;gBACE,OAAO;gBACP,QAAQ;oBACN;oBACA;oBACA;oBACA;iBACD;YACH;YACA;gBACE,OAAO;gBACP,QAAQ;oBACN;oBACA;oBACA;oBACA;iBACD;YACH;YACA;gBACE,OAAO;gBACP,QAAQ;oBACN;oBACA;oBACA;oBACA;iBACD;YACH;YACA;gBACE,OAAO;gBACP,QAAQ;oBACN;oBACA;oBACA;oBACA;oBACA;iBACD;YACH;YACA;gBACE,OAAO;gBACP,QAAQ;oBACN;oBACA;oBACA;iBACD;YACH;YACA;gBACE,OAAO;gBACP,QAAQ;oBACN;oBACA;oBACA;oBACA;iBACD;YACH;YACA;gBACE,OAAO;gBACP,QAAQ;oBACN;oBACA;oBACA;iBACD;YACH;YACA;gBACE,OAAO;gBACP,QAAQ;oBACN;oBACA;oBACA;oBACA;iBACD;YACH;YACA;gBACE,OAAO;gBACP,QAAQ;oBACN;oBACA;oBACA;iBACD;YACH;SACD;IACH;AACF;uCAEe","debugId":null}},
    {"offset": {"line": 733, "column": 0}, "map": {"version":3,"sources":["file:///Users/harshitgangwar/Desktop/SkillForge/app/%28main%29/roadmaps/data/deployAI.jsx"],"sourcesContent":["const deployAISquadRoadmap = {\n  \"Deploy & AI Squad ðŸš€\": {\n    title: \"Deploy and AI Squad ðŸš€\",\n    objective:\n      \"Master the deployment of web applications to the cloud, ensuring scalability, security, and high availability. Then dive into AI-powered applications, Vector Databases, RAG systems, image/text AI tools, and creative AI ideas.\",\n    sections: [\n      {\n        title: \"1. Introduction to Cloud Deployment â€“ The Basics of Scaling Apps\",\n        points: [\n          \"What is cloud deployment and why itâ€™s essential for modern applications\",\n          \"Overview of different cloud providers: AWS, Azure, Google Cloud\",\n          \"Understanding high availability, scalability, and fault tolerance in the cloud\",\n          \"Benefits of cloud computing in terms of flexibility, cost, and performance\",\n          \"Key Concepts: Cloud deployment, Scalability, High availability, Fault tolerance\",\n        ],\n      },\n      {\n        title: \"2. AWS EC2 â€“ Virtual Servers in the Cloud\",\n        points: [\n          \"What is Amazon EC2 (Elastic Compute Cloud)?\",\n          \"Setting up an EC2 instance to host your application\",\n          \"Understanding EC2 instance types, regions, and availability zones\",\n          \"Connecting to EC2 instances using SSH and setting up security credentials\",\n          \"Key Concepts: EC2 Instances, Regions, Availability Zones, SSH\",\n        ],\n      },\n      {\n        title: \"3. Configuring EC2 Security Groups â€“ Controlling Access to Your Instance\",\n        points: [\n          \"What are security groups and why they are critical for security?\",\n          \"Setting inbound and outbound rules for EC2 instances\",\n          \"Restricting access to your EC2 instance using security group configurations\",\n          \"Best practices for EC2 security group management\",\n          \"Key Concepts: Security groups, Inbound and outbound rules, Port management\",\n        ],\n      },\n      {\n        title: \"4. Load Balancers â€“ Ensuring High Availability and Reliability\",\n        points: [\n          \"What is a Load Balancer and why itâ€™s important for scalability and availability?\",\n          \"Introduction to Elastic Load Balancing (ELB) in AWS\",\n          \"Configuring an Application Load Balancer (ALB) for HTTP/HTTPS traffic\",\n          \"Setting up health checks to monitor instance health\",\n          \"Key Concepts: Load Balancing, Application Load Balancer (ALB), Health checks\",\n        ],\n      },\n      {\n        title: \"5. AWS CloudFront â€“ Content Delivery Network for Faster Load Times\",\n        points: [\n          \"Introduction to AWS CloudFront and why itâ€™s crucial for performance optimization\",\n          \"Configuring CloudFront distributions to serve static assets (images, scripts, stylesheets)\",\n          \"Understanding caching, edge locations, and how CloudFront speeds up content delivery\",\n          \"Integrating CloudFront with your S3 bucket for static website hosting\",\n          \"Key Concepts: CloudFront, Caching, Edge locations, Content delivery\",\n        ],\n      },\n      {\n        title: \"6. Docker â€“ Containerization for Consistency and Portability\",\n        points: [\n          \"Introduction to Docker and its benefits for application deployment\",\n          \"Creating Docker images and running containers locally\",\n          \"Understanding Dockerfiles and how to write them for your application\",\n          \"Setting up multi-container applications using Docker Compose\",\n          \"Key Concepts: Docker, Containers, Dockerfiles, Docker Compose\",\n        ],\n      },\n      {\n        title: \"7. AWS ECS â€“ Elastic Container Service for Running Docker Containers\",\n        points: [\n          \"What is AWS ECS and why itâ€™s used for deploying Docker containers?\",\n          \"Setting up an ECS cluster to run Docker containers on EC2 instances\",\n          \"Creating ECS tasks and services to manage containerized applications\",\n          \"Configuring ECS with Application Load Balancer (ALB) for traffic distribution\",\n          \"Key Concepts: ECS, Containers, ECS Tasks, ECS Services, ALB\",\n        ],\n      },\n      {\n        title: \"8. AWS ECR â€“ Elastic Container Registry for Storing Docker Images\",\n        points: [\n          \"What is Amazon ECR and how it works with ECS and Docker?\",\n          \"Pushing and pulling Docker images to/from Amazon ECR\",\n          \"Securing your ECR repository with IAM permissions and access control\",\n          \"Best practices for managing container images in ECR\",\n          \"Key Concepts: ECR, Container registry, IAM, Pushing and pulling Docker images\",\n        ],\n      },\n      {\n        title: \"9. Target Groups â€“ Directing Traffic to the Right Containers\",\n        points: [\n          \"What are Target Groups and how do they work with Load Balancers?\",\n          \"Configuring Target Groups in AWS to route traffic to ECS services\",\n          \"Setting up health checks for Target Groups to ensure only healthy containers receive traffic\",\n          \"Understanding weighted routing and path-based routing in Target Groups\",\n          \"Key Concepts: Target Groups, Routing, Health checks, Weighted routing\",\n        ],\n      },\n      {\n        title: \"10. Security Rules & IAM Roles â€“ Managing Permissions for Security\",\n        points: [\n          \"Introduction to AWS Identity and Access Management (IAM) for managing permissions\",\n          \"Setting up IAM roles and policies to grant permissions to EC2, ECS, and other services\",\n          \"Best practices for securing your AWS infrastructure using IAM\",\n          \"Configuring VPC security groups and network ACLs to restrict access\",\n          \"Key Concepts: IAM, Roles, Policies, Permissions, VPC Security Groups, Network ACLs\",\n        ],\n      },\n      {\n        title: \"11. Scaling and Auto Scaling â€“ Adjusting Resources Based on Demand\",\n        points: [\n          \"Introduction to Auto Scaling and how it helps scale EC2 instances based on demand\",\n          \"Setting up Auto Scaling groups with EC2 instances and configuring scaling policies\",\n          \"Using ECS Auto Scaling to scale Docker containers in response to traffic spikes\",\n          \"Key Concepts: Auto Scaling, Scaling policies, Load balancing, Scaling EC2 and ECS\",\n        ],\n      },\n      {\n        title: \"12. Continuous Deployment (CI/CD) â€“ Automating the Deployment Pipeline\",\n        points: [\n          \"Introduction to CI/CD pipelines and why theyâ€™re essential for modern web apps\",\n          \"Setting up CI/CD with GitHub Actions\",\n          \"Automating Docker container builds and deployment to ECS/ECR\",\n          \"Rolling updates and blue/green deployments with ECS for zero downtime\",\n          \"Key Concepts: CI/CD, Code Pipeline, Code Build, GitHub Actions, Docker deployment, Blue/Green deployments\",\n        ],\n      },\n      {\n        title: \"13. Monitoring and Logging â€“ Keeping Your Application Healthy\",\n        points: [\n          \"Introduction to AWS CloudWatch for monitoring EC2, ECS, and other resources\",\n          \"Setting up CloudWatch alarms for resource utilization and application health\",\n          \"Using AWS CloudTrail for logging and auditing API calls in your AWS account\",\n          \"Integrating logging libraries (e.g., Winston, Morgan) into your Docker containers\",\n          \"Key Concepts: CloudWatch, Monitoring, CloudTrail, Logging, Winston, Morgan\",\n        ],\n      },\n      {\n        title: \"14. Cost Optimization â€“ Managing Your AWS Resources Efficiently\",\n        points: [\n          \"Best practices for managing AWS costs and avoiding unnecessary expenses\",\n          \"Using AWS Trusted Advisor and Cost Explorer to monitor and optimize costs\",\n          \"Setting up AWS Budgets and alerts to track spending\",\n          \"Key Concepts: Cost optimization, AWS Budgets, Trusted Advisor, Cost Explorer\",\n        ],\n      },\n      {\n        title: \"15. Security Best Practices â€“ Keeping Your Application Secure in the Cloud\",\n        points: [\n          \"Setting up Web Application Firewalls (WAF) to protect against common attacks\",\n          \"Using SSL/TLS certificates for secure communication in your application\",\n          \"Regularly auditing IAM roles and security policies to minimize the risk of unauthorized access\",\n          \"Securing Docker containers and images with scanning tools and security patches\",\n          \"Key Concepts: Security, WAF, SSL/TLS, Docker security, IAM auditing\",\n        ],\n      },\n      {\n        title: \"16. Introduction to AI â€“ AI-Powered Applications\",\n        points: [\n          \"What is AI and why itâ€™s transforming technology\",\n          \"AI-powered applications: Chatbots, recommendation systems, and automation\",\n          \"Vector Databases (e.g., Pinecone) and their use cases\",\n          \"RAG (Retrieval-Augmented Generation) systems and applications\",\n          \"Image background removal, image generation, text summarization\",\n          \"Creative ideas and practical applications with AI\",\n          \"Key Concepts: AI, Vector Databases, RAG systems, AI tools, Generative AI\",\n        ],\n      },\n    ],\n  },\n};\n\nexport default deployAISquadRoadmap;\n"],"names":[],"mappings":";;;;AAAA,MAAM,uBAAuB;IAC3B,wBAAwB;QACtB,OAAO;QACP,WACE;QACF,UAAU;YACR;gBACE,OAAO;gBACP,QAAQ;oBACN;oBACA;oBACA;oBACA;oBACA;iBACD;YACH;YACA;gBACE,OAAO;gBACP,QAAQ;oBACN;oBACA;oBACA;oBACA;oBACA;iBACD;YACH;YACA;gBACE,OAAO;gBACP,QAAQ;oBACN;oBACA;oBACA;oBACA;oBACA;iBACD;YACH;YACA;gBACE,OAAO;gBACP,QAAQ;oBACN;oBACA;oBACA;oBACA;oBACA;iBACD;YACH;YACA;gBACE,OAAO;gBACP,QAAQ;oBACN;oBACA;oBACA;oBACA;oBACA;iBACD;YACH;YACA;gBACE,OAAO;gBACP,QAAQ;oBACN;oBACA;oBACA;oBACA;oBACA;iBACD;YACH;YACA;gBACE,OAAO;gBACP,QAAQ;oBACN;oBACA;oBACA;oBACA;oBACA;iBACD;YACH;YACA;gBACE,OAAO;gBACP,QAAQ;oBACN;oBACA;oBACA;oBACA;oBACA;iBACD;YACH;YACA;gBACE,OAAO;gBACP,QAAQ;oBACN;oBACA;oBACA;oBACA;oBACA;iBACD;YACH;YACA;gBACE,OAAO;gBACP,QAAQ;oBACN;oBACA;oBACA;oBACA;oBACA;iBACD;YACH;YACA;gBACE,OAAO;gBACP,QAAQ;oBACN;oBACA;oBACA;oBACA;iBACD;YACH;YACA;gBACE,OAAO;gBACP,QAAQ;oBACN;oBACA;oBACA;oBACA;oBACA;iBACD;YACH;YACA;gBACE,OAAO;gBACP,QAAQ;oBACN;oBACA;oBACA;oBACA;oBACA;iBACD;YACH;YACA;gBACE,OAAO;gBACP,QAAQ;oBACN;oBACA;oBACA;oBACA;iBACD;YACH;YACA;gBACE,OAAO;gBACP,QAAQ;oBACN;oBACA;oBACA;oBACA;oBACA;iBACD;YACH;YACA;gBACE,OAAO;gBACP,QAAQ;oBACN;oBACA;oBACA;oBACA;oBACA;oBACA;oBACA;iBACD;YACH;SACD;IACH;AACF;uCAEe","debugId":null}},
    {"offset": {"line": 913, "column": 0}, "map": {"version":3,"sources":["file:///Users/harshitgangwar/Desktop/SkillForge/app/%28main%29/roadmaps/index.jsx"],"sourcesContent":["import frontend from \"./data/frontend\";\nimport backend from \"./data/backend\";\nimport fullstack from \"./data/fullstack\";\nimport deployAI from \"./data/deployAI\"; // import your Deploy & AI Squad roadmap\n\n\nconst roadmapData = {\n  Frontend: frontend,\n  Backend: backend,\n  \"Full Stack\": fullstack,\n  \"Deploy & AI Squad\": deployAI, // add it here\n\n};\n\nexport default roadmapData;\n"],"names":[],"mappings":";;;;AAAA;AACA;AACA;AACA,gQAAwC,wCAAwC;;;;;AAGhF,MAAM,cAAc;IAClB,UAAU,8JAAQ;IAClB,SAAS,6JAAO;IAChB,cAAc,+JAAS;IACvB,qBAAqB,8JAAQ;AAE/B;uCAEe","debugId":null}},
    {"offset": {"line": 939, "column": 0}, "map": {"version":3,"sources":["file:///Users/harshitgangwar/Desktop/SkillForge/app/%28main%29/roadmaps/page.jsx"],"sourcesContent":["\"use client\";\nimport { useState } from \"react\";\nimport { motion } from \"framer-motion\";\nimport roadmapData from \"./index\"; // Import your roadmap\n\nexport default function Page() {\n  const [selected, setSelected] = useState(\"Frontend\");\n  const [selectedTopic, setSelectedTopic] = useState(\n    Object.keys(roadmapData[\"Frontend\"])[0]\n  );\n\n  const categories = Object.keys(roadmapData);\n  const topics =\n    typeof roadmapData[selected] === \"object\"\n      ? Object.keys(roadmapData[selected])\n      : [];\n\n  const selectedContent =\n    typeof roadmapData[selected] === \"object\"\n      ? roadmapData[selected][selectedTopic]\n      : roadmapData[selected];\n\n  return (\n    <div className=\"flex w-full h-screen bg-gradient-to-br from-gray-950 via-gray-900 to-black text-white overflow-hidden\">\n      {/* Sidebar */}\n      <div className=\"w-64 bg-gradient-to-b from-gray-900 to-black border-r border-gray-800 p-6 flex flex-col\">\n        <h1 className=\"text-3xl font-extrabold mb-10 text-indigo-400 tracking-wide\">\n          Skill<span className=\"text-white\">Forge</span>\n        </h1>\n        {categories.map((category) => (\n          <button\n            key={category}\n            className={`mb-3 p-3 text-left rounded-xl font-medium transition-all duration-200 ${\n              selected === category\n                ? \"bg-indigo-600 text-white shadow-lg shadow-indigo-600/30\"\n                : \"bg-gray-900 hover:bg-gray-800\"\n            }`}\n            onClick={() => {\n              setSelected(category);\n              setSelectedTopic(\n                Object.keys(roadmapData[category])[0] || \"\"\n              );\n            }}\n          >\n            {category}\n          </button>\n        ))}\n      </div>\n\n      {/* Content */}\n      <div className=\"flex-1 px-10 py-8 overflow-y-auto\">\n        <h2 className=\"text-4xl font-bold mb-6 text-indigo-400\">\n          {selected} Roadmap\n        </h2>\n\n        {/* Topics Buttons */}\n        {topics.length > 0 && (\n          <div className=\"flex gap-3 mb-6 flex-wrap\">\n            {topics.map((topic) => (\n              <button\n                key={topic}\n                className={`px-4 py-2 rounded-lg text-sm font-semibold transition-all ${\n                  selectedTopic === topic\n                    ? \"bg-indigo-600 text-white\"\n                    : \"bg-gray-800 hover:bg-gray-700\"\n                }`}\n                onClick={() => setSelectedTopic(topic)}\n              >\n                {topic}\n              </button>\n            ))}\n          </div>\n        )}\n\n        {/* Roadmap Content */}\n        <motion.div\n          className=\"space-y-6\"\n          initial={{ opacity: 0, y: 20 }}\n          animate={{ opacity: 1, y: 0 }}\n          transition={{ duration: 0.5 }}\n        >\n          {/* PDF Download Button */}\n          {selectedContent?.pdf && (\n            <a\n              href={selectedContent.pdf}\n              download\n              target=\"_blank\"\n              className=\"inline-block mb-6 px-6 py-3 bg-indigo-600 hover:bg-indigo-500 text-white rounded-xl font-semibold transition-all\"\n            >\n              Download PDF\n            </a>\n          )}\n\n          {/* Sections */}\n          {selectedContent && selectedContent.sections ? (\n            <div className=\"bg-gray-900/60 p-6 rounded-xl border border-gray-800 backdrop-blur-md\">\n              <h3 className=\"text-2xl font-bold text-indigo-400 mb-2\">\n                {selectedContent.title}\n              </h3>\n              <p className=\"text-gray-300 mb-6\">{selectedContent.objective}</p>\n\n              {selectedContent.sections.map((section, index) => (\n                <div key={index} className=\"mb-6\">\n                  <h4 className=\"text-xl font-semibold text-indigo-300 mb-2\">\n                    {section.title}\n                  </h4>\n                  <ul className=\"list-disc list-inside text-gray-300 space-y-1\">\n                    {section.points.map((point, i) => (\n                      <li key={i}>{point}</li>\n                    ))}\n                  </ul>\n                </div>\n              ))}\n            </div>\n          ) : (\n            <p className=\"text-gray-400\">No roadmap content available.</p>\n          )}\n        </motion.div>\n      </div>\n    </div>\n  );\n}\n"],"names":[],"mappings":";;;;;AACA;AACA;AACA,6OAAmC,sBAAsB;;;AAHzD;;;;AAKe,SAAS;;IACtB,MAAM,CAAC,UAAU,YAAY,GAAG,IAAA,yKAAQ,EAAC;IACzC,MAAM,CAAC,eAAe,iBAAiB,GAAG,IAAA,yKAAQ,EAChD,OAAO,IAAI,CAAC,mJAAW,CAAC,WAAW,CAAC,CAAC,EAAE;IAGzC,MAAM,aAAa,OAAO,IAAI,CAAC,mJAAW;IAC1C,MAAM,SACJ,OAAO,mJAAW,CAAC,SAAS,KAAK,WAC7B,OAAO,IAAI,CAAC,mJAAW,CAAC,SAAS,IACjC,EAAE;IAER,MAAM,kBACJ,OAAO,mJAAW,CAAC,SAAS,KAAK,WAC7B,mJAAW,CAAC,SAAS,CAAC,cAAc,GACpC,mJAAW,CAAC,SAAS;IAE3B,qBACE,6LAAC;QAAI,WAAU;;0BAEb,6LAAC;gBAAI,WAAU;;kCACb,6LAAC;wBAAG,WAAU;;4BAA8D;0CACrE,6LAAC;gCAAK,WAAU;0CAAa;;;;;;;;;;;;oBAEnC,WAAW,GAAG,CAAC,CAAC,yBACf,6LAAC;4BAEC,WAAW,AAAC,yEAIX,OAHC,aAAa,WACT,4DACA;4BAEN,SAAS;gCACP,YAAY;gCACZ,iBACE,OAAO,IAAI,CAAC,mJAAW,CAAC,SAAS,CAAC,CAAC,EAAE,IAAI;4BAE7C;sCAEC;2BAbI;;;;;;;;;;;0BAmBX,6LAAC;gBAAI,WAAU;;kCACb,6LAAC;wBAAG,WAAU;;4BACX;4BAAS;;;;;;;oBAIX,OAAO,MAAM,GAAG,mBACf,6LAAC;wBAAI,WAAU;kCACZ,OAAO,GAAG,CAAC,CAAC,sBACX,6LAAC;gCAEC,WAAW,AAAC,6DAIX,OAHC,kBAAkB,QACd,6BACA;gCAEN,SAAS,IAAM,iBAAiB;0CAE/B;+BARI;;;;;;;;;;kCAeb,6LAAC,uMAAM,CAAC,GAAG;wBACT,WAAU;wBACV,SAAS;4BAAE,SAAS;4BAAG,GAAG;wBAAG;wBAC7B,SAAS;4BAAE,SAAS;4BAAG,GAAG;wBAAE;wBAC5B,YAAY;4BAAE,UAAU;wBAAI;;4BAG3B,CAAA,4BAAA,sCAAA,gBAAiB,GAAG,mBACnB,6LAAC;gCACC,MAAM,gBAAgB,GAAG;gCACzB,QAAQ;gCACR,QAAO;gCACP,WAAU;0CACX;;;;;;4BAMF,mBAAmB,gBAAgB,QAAQ,iBAC1C,6LAAC;gCAAI,WAAU;;kDACb,6LAAC;wCAAG,WAAU;kDACX,gBAAgB,KAAK;;;;;;kDAExB,6LAAC;wCAAE,WAAU;kDAAsB,gBAAgB,SAAS;;;;;;oCAE3D,gBAAgB,QAAQ,CAAC,GAAG,CAAC,CAAC,SAAS,sBACtC,6LAAC;4CAAgB,WAAU;;8DACzB,6LAAC;oDAAG,WAAU;8DACX,QAAQ,KAAK;;;;;;8DAEhB,6LAAC;oDAAG,WAAU;8DACX,QAAQ,MAAM,CAAC,GAAG,CAAC,CAAC,OAAO,kBAC1B,6LAAC;sEAAY;2DAAJ;;;;;;;;;;;2CANL;;;;;;;;;;qDAad,6LAAC;gCAAE,WAAU;0CAAgB;;;;;;;;;;;;;;;;;;;;;;;;AAMzC;GApHwB;KAAA","debugId":null}}]
}