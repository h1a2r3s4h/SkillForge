{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 4, "column": 0}, "map": {"version":3,"sources":["file:///Users/harshitgangwar/Desktop/SkillForge/actions/dashboard.js"],"sourcesContent":["\"use server\";\n\nimport { db } from \"@/lib/prisma\";\nimport { auth } from \"@clerk/nextjs/server\";\nimport { GoogleGenerativeAI } from \"@google/generative-ai\";\n\nconst genAI = new GoogleGenerativeAI(process.env.GEMINI_API_KEY);\nconst model = genAI.getGenerativeModel({ model: \"gemini-1.5-flash\" });\n\nexport const generateAIInsights = async (industry) => {\n  const prompt = `\n          Analyze the current state of the ${industry} industry and provide insights in ONLY the following JSON format without any additional notes or explanations:\n          {\n            \"salaryRanges\": [\n              { \"role\": \"string\", \"min\": number, \"max\": number, \"median\": number, \"location\": \"string\" }\n            ],\n            \"growthRate\": number,\n            \"demandLevel\": \"High\" | \"Medium\" | \"Low\",\n            \"topSkills\": [\"skill1\", \"skill2\"],\n            \"marketOutlook\": \"Positive\" | \"Neutral\" | \"Negative\",\n            \"keyTrends\": [\"trend1\", \"trend2\"],\n            \"recommendedSkills\": [\"skill1\", \"skill2\"]\n          }\n          \n          IMPORTANT: Return ONLY the JSON. No additional text, notes, or markdown formatting.\n          Include at least 5 common roles for salary ranges.\n          Growth rate should be a percentage.\n          Include at least 5 skills and trends.\n        `;\n\n  const result = await model.generateContent(prompt);\n  const response = result.response;\n  const text = response.text();\n  const cleanedText = text.replace(/```(?:json)?\\n?/g, \"\").trim();\n\n  return JSON.parse(cleanedText);\n};\n\nexport async function getIndustryInsights() {\n  const { userId } = await auth();\n  if (!userId) throw new Error(\"Unauthorized\");\n\n  const user = await db.user.findUnique({\n    where: { clerkUserId: userId },\n    include: {\n      industryInsight: true,\n    },\n  });\n\n  if (!user) throw new Error(\"User not found\");\n\n  // If no insights exist, generate them\n  if (!user.industryInsight) {\n    const insights = await generateAIInsights(user.industry);\n\n    const industryInsight = await db.industryInsight.create({\n      data: {\n        industry: user.industry,\n        ...insights,\n        nextUpdate: new Date(Date.now() + 7 * 24 * 60 * 60 * 1000),\n      },\n    });\n\n    return industryInsight;\n  }\n\n  return user.industryInsight;\n}"],"names":[],"mappings":";;;;;;;;AAEA;AACA;AACA;;;;;;;AAEA,MAAM,QAAQ,IAAI,oLAAkB,CAAC,QAAQ,GAAG,CAAC,cAAc;AAC/D,MAAM,QAAQ,MAAM,kBAAkB,CAAC;IAAE,OAAO;AAAmB;AAE5D,MAAM,qBAAqB,OAAO;IACvC,MAAM,SAAS,CAAC;2CACyB,EAAE,SAAS;;;;;;;;;;;;;;;;;QAiB9C,CAAC;IAEP,MAAM,SAAS,MAAM,MAAM,eAAe,CAAC;IAC3C,MAAM,WAAW,OAAO,QAAQ;IAChC,MAAM,OAAO,SAAS,IAAI;IAC1B,MAAM,cAAc,KAAK,OAAO,CAAC,oBAAoB,IAAI,IAAI;IAE7D,OAAO,KAAK,KAAK,CAAC;AACpB;AAEO,eAAe;IACpB,MAAM,EAAE,MAAM,EAAE,GAAG,MAAM,IAAA,2LAAI;IAC7B,IAAI,CAAC,QAAQ,MAAM,IAAI,MAAM;IAE7B,MAAM,OAAO,MAAM,mHAAE,CAAC,IAAI,CAAC,UAAU,CAAC;QACpC,OAAO;YAAE,aAAa;QAAO;QAC7B,SAAS;YACP,iBAAiB;QACnB;IACF;IAEA,IAAI,CAAC,MAAM,MAAM,IAAI,MAAM;IAE3B,sCAAsC;IACtC,IAAI,CAAC,KAAK,eAAe,EAAE;QACzB,MAAM,WAAW,MAAM,mBAAmB,KAAK,QAAQ;QAEvD,MAAM,kBAAkB,MAAM,mHAAE,CAAC,eAAe,CAAC,MAAM,CAAC;YACtD,MAAM;gBACJ,UAAU,KAAK,QAAQ;gBACvB,GAAG,QAAQ;gBACX,YAAY,IAAI,KAAK,KAAK,GAAG,KAAK,IAAI,KAAK,KAAK,KAAK;YACvD;QACF;QAEA,OAAO;IACT;IAEA,OAAO,KAAK,eAAe;AAC7B;;;IA1Da;IA6BS;;AA7BT,+OAAA;AA6BS,+OAAA","debugId":null}},
    {"offset": {"line": 108, "column": 0}, "map": {"version":3,"sources":["file:///Users/harshitgangwar/Desktop/SkillForge/app/%28main%29/dashboard/_components/DashboardView.jsx/__nextjs-internal-proxy.mjs"],"sourcesContent":["// This file is generated by next-core EcmascriptClientReferenceModule.\nimport { registerClientReference } from \"react-server-dom-turbopack/server\";\nexport default registerClientReference(\n    function() { throw new Error(\"Attempted to call the default export of [project]/app/(main)/dashboard/_components/DashboardView.jsx <module evaluation> from the server, but it's on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/app/(main)/dashboard/_components/DashboardView.jsx <module evaluation>\",\n    \"default\",\n);\n"],"names":[],"mappings":"AAAA,uEAAuE;;;;;AACvE;;uCACe,IAAA,wQAAuB,EAClC;IAAa,MAAM,IAAI,MAAM;AAAsT,GACnV,oFACA","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 122, "column": 0}, "map": {"version":3,"sources":["file:///Users/harshitgangwar/Desktop/SkillForge/app/%28main%29/dashboard/_components/DashboardView.jsx/__nextjs-internal-proxy.mjs"],"sourcesContent":["// This file is generated by next-core EcmascriptClientReferenceModule.\nimport { registerClientReference } from \"react-server-dom-turbopack/server\";\nexport default registerClientReference(\n    function() { throw new Error(\"Attempted to call the default export of [project]/app/(main)/dashboard/_components/DashboardView.jsx from the server, but it's on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/app/(main)/dashboard/_components/DashboardView.jsx\",\n    \"default\",\n);\n"],"names":[],"mappings":"AAAA,uEAAuE;;;;;AACvE;;uCACe,IAAA,wQAAuB,EAClC;IAAa,MAAM,IAAI,MAAM;AAAkS,GAC/T,gEACA","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 136, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 143, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 147, "column": 0}, "map": {"version":3,"sources":["file:///Users/harshitgangwar/Desktop/SkillForge/app/%28main%29/dashboard/page.jsx"],"sourcesContent":["import { getIndustryInsights } from \"@/actions/dashboard\"; // must exist in dashboard.js\nimport DashboardView from \"./_components/DashboardView\"; // check exact folder & filename\nimport { getUserOnboardingStatus } from \"@/actions/user\";\nimport { redirect } from \"next/navigation\";\n\nexport default async function DashboardPage() {\n  const onboarded = await getUserOnboardingStatus();\n  if (!onboarded.isOnboarded) redirect(\"/onboarding\");\n\n  const insights = await getIndustryInsights();\n\n  return <DashboardView insights={insights} />;\n}\n"],"names":[],"mappings":";;;;;AAAA,6MAA2D,6BAA6B;AACxF,oRAAyD,gCAAgC;AACzF;AACA;AAAA;;;;;;AAEe,eAAe;IAC5B,MAAM,YAAY,MAAM,IAAA,0IAAuB;IAC/C,IAAI,CAAC,UAAU,WAAW,EAAE,IAAA,iMAAQ,EAAC;IAErC,MAAM,WAAW,MAAM,IAAA,2IAAmB;IAE1C,qBAAO,8OAAC,wKAAa;QAAC,UAAU;;;;;;AAClC","debugId":null}}]
}