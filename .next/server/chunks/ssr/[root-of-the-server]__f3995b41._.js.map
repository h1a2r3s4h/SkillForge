{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 136, "column": 0}, "map": {"version":3,"sources":["file:///Users/harshitgangwar/Desktop/SkillForge/actions/dashboard.js"],"sourcesContent":["\"use server\";\n\nimport { db } from \"@/lib/prisma\";\nimport { auth } from \"@clerk/nextjs/server\";\nimport { GoogleGenAI } from \"@google/genai\"; // ✅ latest SDK\n\n// Initialize Gemini\nconst genAI = new GoogleGenAI({ apiKey: process.env.GEMINI_API_KEY });\n\n// --- Safe Gemini insights generation ---\nexport const generateAIInsights = async (industry) => {\n  const prompt = `\n    Analyze the current state of the ${industry} industry and provide insights in ONLY the following JSON format:\n    {\n      \"salaryRanges\": [\n        { \"role\": \"string\", \"min\": number, \"max\": number, \"median\": number, \"location\": \"string\" }\n      ],\n      \"growthRate\": number,\n      \"demandLevel\": \"High\" | \"Medium\" | \"Low\",\n      \"topSkills\": [\"skill1\", \"skill2\"],\n      \"marketOutlook\": \"Positive\" | \"Neutral\" | \"Negative\",\n      \"keyTrends\": [\"trend1\", \"trend2\"],\n      \"recommendedSkills\": [\"skill1\", \"skill2\"]\n    }\n    IMPORTANT: Return ONLY the JSON. Include at least 5 roles and 5 skills/trends. No notes or markdown.\n  `;\n\n  try {\n    const result = await genAI.models.generateContent({\n      model: \"gemini-2.0-flash\",\n      contents: prompt,\n    });\n\n    const text = result.text || \"\";\n    if (!text) return getDefaultInsights();\n\n    const cleanText = text.replace(/```(?:json)?\\n?/g, \"\").trim();\n\n    try {\n      return JSON.parse(cleanText);\n    } catch {\n      return getDefaultInsights();\n    }\n  } catch {\n    return getDefaultInsights();\n  }\n};\n\n// Default fallback if Gemini fails\nconst getDefaultInsights = () => ({\n  salaryRanges: [{ role: \"Example Role\", min: 0, max: 0, median: 0, location: \"Unknown\" }],\n  growthRate: 0,\n  demandLevel: \"Medium\",\n  topSkills: [],\n  marketOutlook: \"Neutral\",\n  keyTrends: [],\n  recommendedSkills: [],\n});\n\n\n\nexport async function getIndustryInsights() {\n  const { userId } = await auth();\n  if (!userId) throw new Error(\"Unauthorized\");\n\n  const user = await db.user.findUnique({\n    where: { clerkUserId: userId },\n    include: { industryInsight: true },\n  });\n  if (!user) throw new Error(\"User not found\");\n\n  let industryInsight = await db.industryInsight.findUnique({\n    where: { industry: user.industry },\n  });\n\n  if (!industryInsight || new Date() >= new Date(industryInsight.nextUpdate)) {\n    const insights = await generateAIInsights(user.industry);\n\n    if (!industryInsight) {\n      industryInsight = await db.industryInsight.create({\n        data: {\n          industry: user.industry,\n          ...insights,\n          nextUpdate: new Date(Date.now() + 7 * 24 * 60 * 60 * 1000),\n        },\n      });\n    } else {\n      industryInsight = await db.industryInsight.update({\n        where: { industry: user.industry },\n        data: {\n          ...insights,\n          nextUpdate: new Date(Date.now() + 7 * 24 * 60 * 60 * 1000),\n        },\n      });\n    }\n  }\n\n  return industryInsight;\n}\n\n\n// \"use server\";\n\n// import { db } from \"@/lib/prisma\";\n// import { auth } from \"@clerk/nextjs/server\";\n// import { GoogleGenAI } from \"@google/genai\"; // ✅ latest SDK\n\n// // Initialize Gemini\n// const genAI = new GoogleGenAI({ apiKey: process.env.GEMINI_API_KEY });\n\n// // --- Safe Gemini insights generation ---\n// export const generateAIInsights = async (industry) => {\n//   const prompt = `\n//     Analyze the current state of the ${industry} industry and provide insights in ONLY the following JSON format:\n//     {\n//       \"salaryRanges\": [\n//         { \"role\": \"string\", \"min\": number, \"max\": number, \"median\": number, \"location\": \"string\" }\n//       ],\n//       \"growthRate\": number,\n//       \"demandLevel\": \"High\" | \"Medium\" | \"Low\",\n//       \"topSkills\": [\"skill1\", \"skill2\"],\n//       \"marketOutlook\": \"Positive\" | \"Neutral\" | \"Negative\",\n//       \"keyTrends\": [\"trend1\", \"trend2\"],\n//       \"recommendedSkills\": [\"skill1\", \"skill2\"]\n//     }\n//     IMPORTANT: Return ONLY the JSON. Include at least 5 roles and 5 skills/trends. No notes or markdown.\n//   `;\n\n//   try {\n//     const result = await genAI.generate({\n//       model: \"gemini-2.0-flash\",\n//       input: prompt,\n//     });\n\n//     const text = result.outputText || \"\";\n//     if (!text) return getDefaultInsights();\n\n//     const cleanText = text.replace(/```(?:json)?\\n?/g, \"\").trim();\n\n//     try {\n//       return JSON.parse(cleanText);\n//     } catch (err) {\n//       console.warn(\"Failed to parse Gemini JSON:\", err.message);\n//       return getDefaultInsights();\n//     }\n//   } catch (err) {\n//     console.error(\"Gemini API error:\", err.message);\n//     return getDefaultInsights();\n//   }\n// };\n\n// // Default fallback if Gemini fails\n// const getDefaultInsights = () => ({\n//   salaryRanges: [{ role: \"Example Role\", min: 0, max: 0, median: 0, location: \"Unknown\" }],\n//   growthRate: 0,\n//   demandLevel: \"Medium\",\n//   topSkills: [],\n//   marketOutlook: \"Neutral\",\n//   keyTrends: [],\n//   recommendedSkills: [],\n// });\n\n\n\n// export async function getIndustryInsights() {\n//   const { userId } = await auth();\n//   if (!userId) throw new Error(\"Unauthorized\");\n\n//   const user = await db.user.findUnique({\n//     where: { clerkUserId: userId },\n//     include: { industryInsight: true },\n//   });\n\n//   if (!user) throw new Error(\"User not found\");\n\n//   if (!user.industryInsight) {\n//     // ✅ Generate BEFORE DB call (no Prisma transaction timeout risk)\n//     const insights = await generateAIInsights(user.industry);\n\n//     const industryInsight = await db.industryInsight.create({\n//       data: {\n//         industry: user.industry,\n//         ...insights,\n//         nextUpdate: new Date(Date.now() + 7 * 24 * 60 * 60 * 1000),\n//       },\n//     });\n\n//     return industryInsight;\n//   }\n\n//   return user.industryInsight;\n// }\n\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 333, "column": 0}, "map": {"version":3,"sources":["file:///Users/harshitgangwar/Desktop/SkillForge/actions/user.js"],"sourcesContent":["\"use server\";\n\nimport { db } from \"@/lib/prisma\";\nimport { auth } from \"@clerk/nextjs/server\";\nimport { revalidatePath } from \"next/cache\";\nimport { generateAIInsights } from \"./dashboard\";\n\nexport async function updateUser(data) {\n  const { userId } = await auth();\n  if (!userId) throw new Error(\"Unauthorized\");\n\n  const user = await db.user.findUnique({ where: { clerkUserId: userId } });\n  if (!user) throw new Error(\"User not found\");\n\n  try {\n    // Generate AI insights BEFORE transaction\n    let insights = null;\n    let industryInsight = await db.industryInsight.findUnique({\n      where: { industry: data.industry },\n    });\n\n    if (!industryInsight) {\n      insights = await generateAIInsights(data.industry);\n    }\n\n    // Only DB operations inside transaction\n    const result = await db.$transaction(async (tx) => {\n      if (!industryInsight) {\n        industryInsight = await tx.industryInsight.create({\n          data: {\n            industry: data.industry,\n            ...insights,\n            nextUpdate: new Date(Date.now() + 7 * 24 * 60 * 60 * 1000),\n          },\n        });\n      }\n\n      const updatedUser = await tx.user.update({\n        where: { id: user.id },\n        data: {\n          industry: data.industry,\n          experience: data.experience,\n          bio: data.bio,\n          skills: data.skills,\n        },\n      });\n\n      return { updatedUser, industryInsight };\n    });\n\n    revalidatePath(\"/\");\n    return result.updatedUser;\n  } catch (error) {\n    console.error(\"Error updating user and industry:\", error);\n    throw new Error(\"Failed to update profile\");\n  }\n}\n\nexport async function getUserOnboardingStatus() {\n  const { userId } = await auth();\n  if (!userId) throw new Error(\"Unauthorized\");\n\n  try {\n    const user = await db.user.findUnique({\n      where: { clerkUserId: userId },\n      select: { industry: true },\n    });\n\n    return { isOnboarded: !!user?.industry };\n  } catch (error) {\n    console.error(\"Error checking onboarding status:\", error);\n    throw new Error(\"Failed to check onboarding status\");\n  }\n}\n"],"names":[],"mappings":";;;;;;;;AAEA;AACA;AACA;AACA;;;;;;;;AAEO,eAAe,WAAW,IAAI;IACnC,MAAM,EAAE,MAAM,EAAE,GAAG,MAAM,IAAA,2LAAI;IAC7B,IAAI,CAAC,QAAQ,MAAM,IAAI,MAAM;IAE7B,MAAM,OAAO,MAAM,mHAAE,CAAC,IAAI,CAAC,UAAU,CAAC;QAAE,OAAO;YAAE,aAAa;QAAO;IAAE;IACvE,IAAI,CAAC,MAAM,MAAM,IAAI,MAAM;IAE3B,IAAI;QACF,0CAA0C;QAC1C,IAAI,WAAW;QACf,IAAI,kBAAkB,MAAM,mHAAE,CAAC,eAAe,CAAC,UAAU,CAAC;YACxD,OAAO;gBAAE,UAAU,KAAK,QAAQ;YAAC;QACnC;QAEA,IAAI,CAAC,iBAAiB;YACpB,WAAW,MAAM,IAAA,0IAAkB,EAAC,KAAK,QAAQ;QACnD;QAEA,wCAAwC;QACxC,MAAM,SAAS,MAAM,mHAAE,CAAC,YAAY,CAAC,OAAO;YAC1C,IAAI,CAAC,iBAAiB;gBACpB,kBAAkB,MAAM,GAAG,eAAe,CAAC,MAAM,CAAC;oBAChD,MAAM;wBACJ,UAAU,KAAK,QAAQ;wBACvB,GAAG,QAAQ;wBACX,YAAY,IAAI,KAAK,KAAK,GAAG,KAAK,IAAI,KAAK,KAAK,KAAK;oBACvD;gBACF;YACF;YAEA,MAAM,cAAc,MAAM,GAAG,IAAI,CAAC,MAAM,CAAC;gBACvC,OAAO;oBAAE,IAAI,KAAK,EAAE;gBAAC;gBACrB,MAAM;oBACJ,UAAU,KAAK,QAAQ;oBACvB,YAAY,KAAK,UAAU;oBAC3B,KAAK,KAAK,GAAG;oBACb,QAAQ,KAAK,MAAM;gBACrB;YACF;YAEA,OAAO;gBAAE;gBAAa;YAAgB;QACxC;QAEA,IAAA,+IAAc,EAAC;QACf,OAAO,OAAO,WAAW;IAC3B,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,qCAAqC;QACnD,MAAM,IAAI,MAAM;IAClB;AACF;AAEO,eAAe;IACpB,MAAM,EAAE,MAAM,EAAE,GAAG,MAAM,IAAA,2LAAI;IAC7B,IAAI,CAAC,QAAQ,MAAM,IAAI,MAAM;IAE7B,IAAI;QACF,MAAM,OAAO,MAAM,mHAAE,CAAC,IAAI,CAAC,UAAU,CAAC;YACpC,OAAO;gBAAE,aAAa;YAAO;YAC7B,QAAQ;gBAAE,UAAU;YAAK;QAC3B;QAEA,OAAO;YAAE,aAAa,CAAC,CAAC,MAAM;QAAS;IACzC,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,qCAAqC;QACnD,MAAM,IAAI,MAAM;IAClB;AACF;;;IAlEsB;IAmDA;;AAnDA,+OAAA;AAmDA,+OAAA","debugId":null}},
    {"offset": {"line": 457, "column": 0}, "map": {"version":3,"sources":["file:///Users/harshitgangwar/Desktop/SkillForge/app/%28main%29/dashboard/_components/DashboardView.jsx/__nextjs-internal-proxy.mjs"],"sourcesContent":["// This file is generated by next-core EcmascriptClientReferenceModule.\nimport { registerClientReference } from \"react-server-dom-turbopack/server\";\nexport default registerClientReference(\n    function() { throw new Error(\"Attempted to call the default export of [project]/app/(main)/dashboard/_components/DashboardView.jsx <module evaluation> from the server, but it's on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/app/(main)/dashboard/_components/DashboardView.jsx <module evaluation>\",\n    \"default\",\n);\n"],"names":[],"mappings":"AAAA,uEAAuE;;;;;AACvE;;uCACe,IAAA,wQAAuB,EAClC;IAAa,MAAM,IAAI,MAAM;AAAsT,GACnV,oFACA","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 471, "column": 0}, "map": {"version":3,"sources":["file:///Users/harshitgangwar/Desktop/SkillForge/app/%28main%29/dashboard/_components/DashboardView.jsx/__nextjs-internal-proxy.mjs"],"sourcesContent":["// This file is generated by next-core EcmascriptClientReferenceModule.\nimport { registerClientReference } from \"react-server-dom-turbopack/server\";\nexport default registerClientReference(\n    function() { throw new Error(\"Attempted to call the default export of [project]/app/(main)/dashboard/_components/DashboardView.jsx from the server, but it's on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/app/(main)/dashboard/_components/DashboardView.jsx\",\n    \"default\",\n);\n"],"names":[],"mappings":"AAAA,uEAAuE;;;;;AACvE;;uCACe,IAAA,wQAAuB,EAClC;IAAa,MAAM,IAAI,MAAM;AAAkS,GAC/T,gEACA","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 485, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 493, "column": 0}, "map": {"version":3,"sources":["file:///Users/harshitgangwar/Desktop/SkillForge/app/%28main%29/dashboard/page.jsx"],"sourcesContent":["import { getIndustryInsights } from \"@/actions/dashboard\"; // must exist in dashboard.js\nimport DashboardView from \"./_components/DashboardView\"; // check exact folder & filename\nimport { getUserOnboardingStatus } from \"@/actions/user\";\nimport { redirect } from \"next/navigation\";\n\nexport default async function DashboardPage() {\n  const onboarded = await getUserOnboardingStatus();\n  if (!onboarded.isOnboarded) redirect(\"/onboarding\");\n\n  const insights = await getIndustryInsights();\n\n  return <DashboardView insights={insights} />;\n}\n"],"names":[],"mappings":";;;;;AAAA,6MAA2D,6BAA6B;AACxF,oRAAyD,gCAAgC;AACzF;AACA;AAAA;;;;;;AAEe,eAAe;IAC5B,MAAM,YAAY,MAAM,IAAA,0IAAuB;IAC/C,IAAI,CAAC,UAAU,WAAW,EAAE,IAAA,iMAAQ,EAAC;IAErC,MAAM,WAAW,MAAM,IAAA,2IAAmB;IAE1C,qBAAO,8OAAC,wKAAa;QAAC,UAAU;;;;;;AAClC","debugId":null}}]
}