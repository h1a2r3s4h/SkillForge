{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 4, "column": 0}, "map": {"version":3,"sources":["file:///Users/harshitgangwar/Desktop/SkillForge/actions/dashboard.js"],"sourcesContent":["\"use server\";\n\nimport { db } from \"@/lib/prisma\";\nimport { auth } from \"@clerk/nextjs/server\";\nimport { GoogleGenerativeAI } from \"@google/generative-ai\";\n\nconst genAI = new GoogleGenerativeAI(process.env.GEMINI_API_KEY);\nconst model = genAI.getGenerativeModel({ model: \"gemini-1.5-flash\" });\n\n// Generate AI insights for a given industry\nexport const generateAIInsights = async (industry) => {\n  const prompt = `\n    Analyze the current state of the ${industry} industry and provide insights in ONLY the following JSON format without any additional notes or explanations:\n    {\n      \"salaryRanges\": [\n        { \"role\": \"string\", \"min\": number, \"max\": number, \"median\": number, \"location\": \"string\" }\n      ],\n      \"growthRate\": number,\n      \"demandLevel\": \"High\" | \"Medium\" | \"Low\",\n      \"topSkills\": [\"skill1\", \"skill2\"],\n      \"marketOutlook\": \"Positive\" | \"Neutral\" | \"Negative\",\n      \"keyTrends\": [\"trend1\", \"trend2\"],\n      \"recommendedSkills\": [\"skill1\", \"skill2\"]\n    }\n\n    Include at least 5 roles, 5 skills, and 5 trends. Return only JSON.\n  `;\n\n  try {\n    const result = await model.generateContent({ contents: [{ role: \"user\", text: prompt }] });\n    const responseText = result.response?.text?.() || \"{}\";\n\n    // Clean and parse JSON safely\n    const cleanedText = responseText.replace(/```(?:json)?\\n?/g, \"\").trim();\n    return JSON.parse(cleanedText);\n  } catch (err) {\n    console.error(\"Error generating AI insights:\", err.message);\n\n    // Fallback default values\n    return {\n      salaryRanges: [],\n      growthRate: 0,\n      demandLevel: \"Medium\",\n      topSkills: [],\n      marketOutlook: \"Neutral\",\n      keyTrends: [],\n      recommendedSkills: [],\n    };\n  }\n};\n\n// Fetch existing industry insights for the logged-in user or generate them if missing\nexport async function getIndustryInsights() {\n  const { userId } = await auth();\n  if (!userId) throw new Error(\"Unauthorized\");\n\n  const user = await db.user.findUnique({\n    where: { clerkUserId: userId },\n    include: { industryInsight: true },\n  });\n\n  if (!user) throw new Error(\"User not found\");\n\n  if (!user.industryInsight) {\n    const insights = await generateAIInsights(user.industry);\n\n    const industryInsight = await db.industryInsight.create({\n      data: {\n        industry: user.industry,\n        ...insights,\n        nextUpdate: new Date(Date.now() + 7 * 24 * 60 * 60 * 1000),\n      },\n    });\n\n    return industryInsight;\n  }\n\n  return user.industryInsight;\n}\n"],"names":[],"mappings":";;;;;;;;AAEA;AACA;AACA;;;;;;;AAEA,MAAM,QAAQ,IAAI,oLAAkB,CAAC,QAAQ,GAAG,CAAC,cAAc;AAC/D,MAAM,QAAQ,MAAM,kBAAkB,CAAC;IAAE,OAAO;AAAmB;AAG5D,MAAM,qBAAqB,OAAO;IACvC,MAAM,SAAS,CAAC;qCACmB,EAAE,SAAS;;;;;;;;;;;;;;EAc9C,CAAC;IAED,IAAI;QACF,MAAM,SAAS,MAAM,MAAM,eAAe,CAAC;YAAE,UAAU;gBAAC;oBAAE,MAAM;oBAAQ,MAAM;gBAAO;aAAE;QAAC;QACxF,MAAM,eAAe,OAAO,QAAQ,EAAE,YAAY;QAElD,8BAA8B;QAC9B,MAAM,cAAc,aAAa,OAAO,CAAC,oBAAoB,IAAI,IAAI;QACrE,OAAO,KAAK,KAAK,CAAC;IACpB,EAAE,OAAO,KAAK;QACZ,QAAQ,KAAK,CAAC,iCAAiC,IAAI,OAAO;QAE1D,0BAA0B;QAC1B,OAAO;YACL,cAAc,EAAE;YAChB,YAAY;YACZ,aAAa;YACb,WAAW,EAAE;YACb,eAAe;YACf,WAAW,EAAE;YACb,mBAAmB,EAAE;QACvB;IACF;AACF;AAGO,eAAe;IACpB,MAAM,EAAE,MAAM,EAAE,GAAG,MAAM,IAAA,2LAAI;IAC7B,IAAI,CAAC,QAAQ,MAAM,IAAI,MAAM;IAE7B,MAAM,OAAO,MAAM,mHAAE,CAAC,IAAI,CAAC,UAAU,CAAC;QACpC,OAAO;YAAE,aAAa;QAAO;QAC7B,SAAS;YAAE,iBAAiB;QAAK;IACnC;IAEA,IAAI,CAAC,MAAM,MAAM,IAAI,MAAM;IAE3B,IAAI,CAAC,KAAK,eAAe,EAAE;QACzB,MAAM,WAAW,MAAM,mBAAmB,KAAK,QAAQ;QAEvD,MAAM,kBAAkB,MAAM,mHAAE,CAAC,eAAe,CAAC,MAAM,CAAC;YACtD,MAAM;gBACJ,UAAU,KAAK,QAAQ;gBACvB,GAAG,QAAQ;gBACX,YAAY,IAAI,KAAK,KAAK,GAAG,KAAK,IAAI,KAAK,KAAK,KAAK;YACvD;QACF;QAEA,OAAO;IACT;IAEA,OAAO,KAAK,eAAe;AAC7B;;;IApEa;IA0CS;;AA1CT,+OAAA;AA0CS,+OAAA","debugId":null}},
    {"offset": {"line": 105, "column": 0}, "map": {"version":3,"sources":["file:///Users/harshitgangwar/Desktop/SkillForge/actions/user.js"],"sourcesContent":["\"use server\";\n\nimport { db } from \"@/lib/prisma\";\nimport { auth } from \"@clerk/nextjs/server\";\nimport { revalidatePath } from \"next/cache\";\nimport { generateAIInsights } from \"./dashboard\";\n\nexport async function updateUser(data) {\n  const { userId } = await auth();\n  if (!userId) throw new Error(\"Unauthorized\");\n\n  const user = await db.user.findUnique({ where: { clerkUserId: userId } });\n  if (!user) throw new Error(\"User not found\");\n\n  try {\n    const result = await db.$transaction(async (tx) => {\n      // Check or create industryInsight\n      let industryInsight = await tx.industryInsight.findUnique({\n        where: { industry: data.industry },\n      });\n\n      if (!industryInsight) {\n        const insights = await generateAIInsights(data.industry);\n\n        industryInsight = await tx.industryInsight.create({\n          data: {\n            industry: data.industry,\n            ...insights,\n            nextUpdate: new Date(Date.now() + 7 * 24 * 60 * 60 * 1000),\n          },\n        });\n      }\n\n      // Update user\n      const updatedUser = await tx.user.update({\n        where: { id: user.id },\n        data: {\n          industry: data.industry,\n          experience: data.experience,\n          bio: data.bio,\n          skills: data.skills,\n        },\n      });\n\n      return { updatedUser, industryInsight };\n    }, { timeout: 10000 });\n\n    revalidatePath(\"/\"); \n    return result.updatedUser;\n  } catch (error) {\n    console.error(\"Error updating user and industry:\", error);\n\n    if (error.message.includes(\"not found\") || error.message.includes(\"403\")) {\n      throw new Error(\"AI model not available or API key invalid.\");\n    }\n\n    throw new Error(\"Failed to update profile\");\n  }\n}\n\nexport async function getUserOnboardingStatus() {\n  const { userId } = await auth();\n  if (!userId) throw new Error(\"Unauthorized\");\n\n  try {\n    const user = await db.user.findUnique({\n      where: { clerkUserId: userId },\n      select: { industry: true },\n    });\n\n    return { isOnboarded: !!user?.industry };\n  } catch (error) {\n    console.error(\"Error checking onboarding status:\", error);\n    throw new Error(\"Failed to check onboarding status\" + error.message);\n  }\n}\n\nexport async function getIndustryInsights() {\n  const { userId } = await auth();\n  if (!userId) throw new Error(\"Unauthorized\");\n\n  const user = await db.user.findUnique({\n    where: { clerkUserId: userId },\n    include: { industryInsight: true },\n  });\n\n  if (!user) throw new Error(\"User not found\");\n\n  if (!user.industryInsight) {\n    const insights = await generateAIInsights(user.industry);\n\n    const industryInsight = await db.industryInsight.create({\n      data: {\n        industry: user.industry,\n        ...insights,\n        nextUpdate: new Date(Date.now() + 7 * 24 * 60 * 60 * 1000),\n      },\n    });\n\n    return industryInsight;\n  }\n\n  return user.industryInsight;\n}\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 260, "column": 0}, "map": {"version":3,"sources":["file:///Users/harshitgangwar/Desktop/SkillForge/app/%28main%29/dashboard/page.jsx"],"sourcesContent":["import { getIndustryInsights } from \"@/actions/dashboard\"; // must exist in dashboard.js\n// import DashboardView from \"./_components/DashboardView\"; // check exact folder & filename\nimport { getUserOnboardingStatus } from \"@/actions/user\";\nimport { redirect } from \"next/navigation\";\n\nexport default async function DashboardPage() {\n  const onboarded = await getUserOnboardingStatus();\n  if (!onboarded.isOnboarded) redirect(\"/onboarding\");\n\n  const insights = await getIndustryInsights();\n\n  return <DashboardView insights={insights} />;\n}\n"],"names":[],"mappings":";;;;;AAAA,6MAA2D,6BAA6B;AACxF,4FAA4F;AAC5F;AACA;AAAA;;;;;AAEe,eAAe;IAC5B,MAAM,YAAY,MAAM,IAAA,0IAAuB;IAC/C,IAAI,CAAC,UAAU,WAAW,EAAE,IAAA,iMAAQ,EAAC;IAErC,MAAM,WAAW,MAAM,IAAA,2IAAmB;IAE1C,qBAAO,8OAAC;QAAc,UAAU;;;;;;AAClC","debugId":null}}]
}