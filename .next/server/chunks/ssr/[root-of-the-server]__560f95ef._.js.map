{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 4, "column": 0}, "map": {"version":3,"sources":["file:///Users/harshitgangwar/Desktop/SkillForge/actions/dashboard.js"],"sourcesContent":["\"use server\";\n\nimport { db } from \"@/lib/prisma\";\nimport { auth } from \"@clerk/nextjs/server\";\nimport { GoogleGenerativeAI } from \"@google/generative-ai\";\n\n// Initialize Gemini model\nconst genAI = new GoogleGenerativeAI(process.env.GEMINI_API_KEY);\nconst model = genAI.getGenerativeModel({ model: \"gemini-2.5-flash\" });\n\n\n\n// --- Safe Gemini insights generation ---\nexport const generateAIInsights = async (industry) => {\n  const prompt = `\n    Analyze the current state of the ${industry} industry and provide insights in ONLY the following JSON format:\n    {\n      \"salaryRanges\": [\n        { \"role\": \"string\", \"min\": number, \"max\": number, \"median\": number, \"location\": \"string\" }\n      ],\n      \"growthRate\": number,\n      \"demandLevel\": \"High\" | \"Medium\" | \"Low\",\n      \"topSkills\": [\"skill1\", \"skill2\"],\n      \"marketOutlook\": \"Positive\" | \"Neutral\" | \"Negative\",\n      \"keyTrends\": [\"trend1\", \"trend2\"],\n      \"recommendedSkills\": [\"skill1\", \"skill2\"]\n    }\n    IMPORTANT: Return ONLY the JSON. Include at least 5 roles and 5 skills/trends. No notes or markdown.\n  `;\n\n  try {\n    const result = await model.generateContent(prompt);\n\n    if (!result?.response?.text) {\n      console.warn(\"Gemini returned no text. Using default insights.\");\n      return getDefaultInsights();\n    }\n\n    let text = result.response.text();\n    text = text.replace(/```(?:json)?\\n?/g, \"\").trim();\n\n    try {\n      const json = JSON.parse(text);\n      return json;\n    } catch (err) {\n      console.warn(\"Failed to parse Gemini JSON:\", err.message);\n      return getDefaultInsights();\n    }\n  } catch (err) {\n    console.error(\"Gemini API error:\", err.message);\n    return getDefaultInsights();\n  }\n};\n\n// Default fallback if Gemini fails\nconst getDefaultInsights = () => ({\n  salaryRanges: [{ role: \"Example Role\", min: 0, max: 0, median: 0, location: \"Unknown\" }],\n  growthRate: 0,\n  demandLevel: \"Medium\",\n  topSkills: [],\n  marketOutlook: \"Medium\",\n  keyTrends: [],\n  recommendedSkills: [],\n});\n\nexport async function getIndustryInsights() {\n  const { userId } = await auth();\n  if (!userId) throw new Error(\"Unauthorized\");\n\n  const user = await db.user.findUnique({\n    where: { clerkUserId: userId },\n    include: {\n      industryInsight: true,\n    },\n  });\n\n  if (!user) throw new Error(\"User not found\");\n\n  // If no insights exist, generate them\n  if (!user.industryInsight) {\n    const insights = await generateAIInsights(user.industry);\n\n    const industryInsight = await db.industryInsight.create({\n      data: {\n        industry: user.industry,\n        ...insights,\n        nextUpdate: new Date(Date.now() + 7 * 24 * 60 * 60 * 1000),\n      },\n    });\n\n    return industryInsight;\n  }\n\n  return user.industryInsight;\n}"],"names":[],"mappings":";;;;;;;;AAEA;AACA;AACA;;;;;;;AAEA,0BAA0B;AAC1B,MAAM,QAAQ,IAAI,oLAAkB,CAAC,QAAQ,GAAG,CAAC,cAAc;AAC/D,MAAM,QAAQ,MAAM,kBAAkB,CAAC;IAAE,OAAO;AAAmB;AAK5D,MAAM,qBAAqB,OAAO;IACvC,MAAM,SAAS,CAAC;qCACmB,EAAE,SAAS;;;;;;;;;;;;;EAa9C,CAAC;IAED,IAAI;QACF,MAAM,SAAS,MAAM,MAAM,eAAe,CAAC;QAE3C,IAAI,CAAC,QAAQ,UAAU,MAAM;YAC3B,QAAQ,IAAI,CAAC;YACb,OAAO;QACT;QAEA,IAAI,OAAO,OAAO,QAAQ,CAAC,IAAI;QAC/B,OAAO,KAAK,OAAO,CAAC,oBAAoB,IAAI,IAAI;QAEhD,IAAI;YACF,MAAM,OAAO,KAAK,KAAK,CAAC;YACxB,OAAO;QACT,EAAE,OAAO,KAAK;YACZ,QAAQ,IAAI,CAAC,gCAAgC,IAAI,OAAO;YACxD,OAAO;QACT;IACF,EAAE,OAAO,KAAK;QACZ,QAAQ,KAAK,CAAC,qBAAqB,IAAI,OAAO;QAC9C,OAAO;IACT;AACF;AAEA,mCAAmC;AACnC,MAAM,qBAAqB,IAAM,CAAC;QAChC,cAAc;YAAC;gBAAE,MAAM;gBAAgB,KAAK;gBAAG,KAAK;gBAAG,QAAQ;gBAAG,UAAU;YAAU;SAAE;QACxF,YAAY;QACZ,aAAa;QACb,WAAW,EAAE;QACb,eAAe;QACf,WAAW,EAAE;QACb,mBAAmB,EAAE;IACvB,CAAC;AAEM,eAAe;IACpB,MAAM,EAAE,MAAM,EAAE,GAAG,MAAM,IAAA,2LAAI;IAC7B,IAAI,CAAC,QAAQ,MAAM,IAAI,MAAM;IAE7B,MAAM,OAAO,MAAM,mHAAE,CAAC,IAAI,CAAC,UAAU,CAAC;QACpC,OAAO;YAAE,aAAa;QAAO;QAC7B,SAAS;YACP,iBAAiB;QACnB;IACF;IAEA,IAAI,CAAC,MAAM,MAAM,IAAI,MAAM;IAE3B,sCAAsC;IACtC,IAAI,CAAC,KAAK,eAAe,EAAE;QACzB,MAAM,WAAW,MAAM,mBAAmB,KAAK,QAAQ;QAEvD,MAAM,kBAAkB,MAAM,mHAAE,CAAC,eAAe,CAAC,MAAM,CAAC;YACtD,MAAM;gBACJ,UAAU,KAAK,QAAQ;gBACvB,GAAG,QAAQ;gBACX,YAAY,IAAI,KAAK,KAAK,GAAG,KAAK,IAAI,KAAK,KAAK,KAAK;YACvD;QACF;QAEA,OAAO;IACT;IAEA,OAAO,KAAK,eAAe;AAC7B;;;IAjFa;IAoDS;;AApDT,+OAAA;AAoDS,+OAAA","debugId":null}},
    {"offset": {"line": 117, "column": 0}, "map": {"version":3,"sources":["file:///Users/harshitgangwar/Desktop/SkillForge/actions/user.js"],"sourcesContent":["\"use server\";\n\nimport { db } from \"@/lib/prisma\";\nimport { auth } from \"@clerk/nextjs/server\";\nimport { revalidatePath } from \"next/cache\";\nimport { generateAIInsights } from \"./dashboard\";\n\n\nexport async function updateUser(data) {\n  const { userId } = await auth();\n  if (!userId) throw new Error(\"Unauthorized\");\n\n  const user = await db.user.findUnique({ where: { clerkUserId: userId } });\n  if (!user) throw new Error(\"User not found\");\n\n  try {\n    const result = await db.$transaction(async (tx) => {\n      // Find or create industry insight\n      let industryInsight = await tx.industryInsight.findUnique({\n        where: { industry: data.industry },\n      });\n\n      if (!industryInsight) {\n        const insights = await generateAIInsights(data.industry);\n\n        industryInsight = await tx.industryInsight.create({\n          data: {\n            industry: data.industry,\n            ...insights, // JSON fields match Prisma schema\n            nextUpdate: new Date(Date.now() + 7 * 24 * 60 * 60 * 1000),\n          },\n        });\n      }\n\n      // Update user\n      const updatedUser = await tx.user.update({\n        where: { id: user.id },\n        data: {\n          industry: data.industry,\n          experience: data.experience,\n          bio: data.bio,\n          skills: data.skills, // must be String[] in Prisma\n        },\n      });\n\n      return { updatedUser, industryInsight };\n    });\n\n    revalidatePath(\"/\");\n    return result.updatedUser;\n  } catch (error) {\n    console.error(\"Error updating user and industry:\", error);\n    throw new Error(\"Failed to update profile\");\n  }\n}\n\n// --- Check onboarding status ---\nexport async function getUserOnboardingStatus() {\n  const { userId } = await auth();\n  if (!userId) throw new Error(\"Unauthorized\");\n\n  try {\n    const user = await db.user.findUnique({\n      where: { clerkUserId: userId },\n      select: { industry: true },\n    });\n\n    return {\n      isOnboarded: !!user?.industry,\n    };\n  } catch (error) {\n    console.error(\"Error checking onboarding status:\", error);\n    throw new Error(\"Failed to check onboarding status\");\n  }\n}"],"names":[],"mappings":";;;;;;;;AAEA;AACA;AACA;AACA;;;;;;;;AAGO,eAAe,WAAW,IAAI;IACnC,MAAM,EAAE,MAAM,EAAE,GAAG,MAAM,IAAA,2LAAI;IAC7B,IAAI,CAAC,QAAQ,MAAM,IAAI,MAAM;IAE7B,MAAM,OAAO,MAAM,mHAAE,CAAC,IAAI,CAAC,UAAU,CAAC;QAAE,OAAO;YAAE,aAAa;QAAO;IAAE;IACvE,IAAI,CAAC,MAAM,MAAM,IAAI,MAAM;IAE3B,IAAI;QACF,MAAM,SAAS,MAAM,mHAAE,CAAC,YAAY,CAAC,OAAO;YAC1C,kCAAkC;YAClC,IAAI,kBAAkB,MAAM,GAAG,eAAe,CAAC,UAAU,CAAC;gBACxD,OAAO;oBAAE,UAAU,KAAK,QAAQ;gBAAC;YACnC;YAEA,IAAI,CAAC,iBAAiB;gBACpB,MAAM,WAAW,MAAM,IAAA,0IAAkB,EAAC,KAAK,QAAQ;gBAEvD,kBAAkB,MAAM,GAAG,eAAe,CAAC,MAAM,CAAC;oBAChD,MAAM;wBACJ,UAAU,KAAK,QAAQ;wBACvB,GAAG,QAAQ;wBACX,YAAY,IAAI,KAAK,KAAK,GAAG,KAAK,IAAI,KAAK,KAAK,KAAK;oBACvD;gBACF;YACF;YAEA,cAAc;YACd,MAAM,cAAc,MAAM,GAAG,IAAI,CAAC,MAAM,CAAC;gBACvC,OAAO;oBAAE,IAAI,KAAK,EAAE;gBAAC;gBACrB,MAAM;oBACJ,UAAU,KAAK,QAAQ;oBACvB,YAAY,KAAK,UAAU;oBAC3B,KAAK,KAAK,GAAG;oBACb,QAAQ,KAAK,MAAM;gBACrB;YACF;YAEA,OAAO;gBAAE;gBAAa;YAAgB;QACxC;QAEA,IAAA,+IAAc,EAAC;QACf,OAAO,OAAO,WAAW;IAC3B,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,qCAAqC;QACnD,MAAM,IAAI,MAAM;IAClB;AACF;AAGO,eAAe;IACpB,MAAM,EAAE,MAAM,EAAE,GAAG,MAAM,IAAA,2LAAI;IAC7B,IAAI,CAAC,QAAQ,MAAM,IAAI,MAAM;IAE7B,IAAI;QACF,MAAM,OAAO,MAAM,mHAAE,CAAC,IAAI,CAAC,UAAU,CAAC;YACpC,OAAO;gBAAE,aAAa;YAAO;YAC7B,QAAQ;gBAAE,UAAU;YAAK;QAC3B;QAEA,OAAO;YACL,aAAa,CAAC,CAAC,MAAM;QACvB;IACF,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,qCAAqC;QACnD,MAAM,IAAI,MAAM;IAClB;AACF;;;IAlEsB;IAiDA;;AAjDA,+OAAA;AAiDA,+OAAA","debugId":null}},
    {"offset": {"line": 238, "column": 0}, "map": {"version":3,"sources":["file:///Users/harshitgangwar/Desktop/SkillForge/app/%28main%29/dashboard/_components/DashboardView.jsx/__nextjs-internal-proxy.mjs"],"sourcesContent":["// This file is generated by next-core EcmascriptClientReferenceModule.\nimport { registerClientReference } from \"react-server-dom-turbopack/server\";\nexport default registerClientReference(\n    function() { throw new Error(\"Attempted to call the default export of [project]/app/(main)/dashboard/_components/DashboardView.jsx <module evaluation> from the server, but it's on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/app/(main)/dashboard/_components/DashboardView.jsx <module evaluation>\",\n    \"default\",\n);\n"],"names":[],"mappings":"AAAA,uEAAuE;;;;;AACvE;;uCACe,IAAA,wQAAuB,EAClC;IAAa,MAAM,IAAI,MAAM;AAAsT,GACnV,oFACA","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 252, "column": 0}, "map": {"version":3,"sources":["file:///Users/harshitgangwar/Desktop/SkillForge/app/%28main%29/dashboard/_components/DashboardView.jsx/__nextjs-internal-proxy.mjs"],"sourcesContent":["// This file is generated by next-core EcmascriptClientReferenceModule.\nimport { registerClientReference } from \"react-server-dom-turbopack/server\";\nexport default registerClientReference(\n    function() { throw new Error(\"Attempted to call the default export of [project]/app/(main)/dashboard/_components/DashboardView.jsx from the server, but it's on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/app/(main)/dashboard/_components/DashboardView.jsx\",\n    \"default\",\n);\n"],"names":[],"mappings":"AAAA,uEAAuE;;;;;AACvE;;uCACe,IAAA,wQAAuB,EAClC;IAAa,MAAM,IAAI,MAAM;AAAkS,GAC/T,gEACA","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 266, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 274, "column": 0}, "map": {"version":3,"sources":["file:///Users/harshitgangwar/Desktop/SkillForge/app/%28main%29/dashboard/page.jsx"],"sourcesContent":["import { getIndustryInsights } from \"@/actions/dashboard\"; // must exist in dashboard.js\nimport DashboardView from \"./_components/DashboardView\"; // check exact folder & filename\nimport { getUserOnboardingStatus } from \"@/actions/user\";\nimport { redirect } from \"next/navigation\";\n\nexport default async function DashboardPage() {\n  const onboarded = await getUserOnboardingStatus();\n  if (!onboarded.isOnboarded) redirect(\"/onboarding\");\n\n  const insights = await getIndustryInsights();\n\n  return <DashboardView insights={insights} />;\n}\n"],"names":[],"mappings":";;;;;AAAA,6MAA2D,6BAA6B;AACxF,oRAAyD,gCAAgC;AACzF;AACA;AAAA;;;;;;AAEe,eAAe;IAC5B,MAAM,YAAY,MAAM,IAAA,0IAAuB;IAC/C,IAAI,CAAC,UAAU,WAAW,EAAE,IAAA,iMAAQ,EAAC;IAErC,MAAM,WAAW,MAAM,IAAA,2IAAmB;IAE1C,qBAAO,8OAAC,wKAAa;QAAC,UAAU;;;;;;AAClC","debugId":null}}]
}